// Generated by Haxe 4.3.0-rc.1+
#ifndef INCLUDED__Test_Test_Fields_
#define INCLUDED__Test_Test_Fields_

#ifndef HXCPP_H
#include <hxcpp.h>
#endif

HX_DECLARE_CLASS1(_Test,Test_Fields_)

namespace _Test{


class HXCPP_CLASS_ATTRIBUTES Test_Fields__obj : public ::hx::Object
{
	public:
		typedef ::hx::Object super;
		typedef Test_Fields__obj OBJ_;
		Test_Fields__obj();

	public:
		enum { _hx_ClassId = 0x50a0c7aa };

		void __construct();
		inline void *operator new(size_t inSize, bool inContainer=false,const char *inName="_Test.Test_Fields_")
			{ return ::hx::Object::operator new(inSize,inContainer,inName); }
		inline void *operator new(size_t inSize, int extra)
			{ return ::hx::Object::operator new(inSize+extra,false,"_Test.Test_Fields_"); }

		inline static ::hx::ObjectPtr< Test_Fields__obj > __new() {
			::hx::ObjectPtr< Test_Fields__obj > __this = new Test_Fields__obj();
			__this->__construct();
			return __this;
		}

		inline static ::hx::ObjectPtr< Test_Fields__obj > __alloc(::hx::Ctx *_hx_ctx) {
			Test_Fields__obj *__this = (Test_Fields__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Test_Fields__obj), false, "_Test.Test_Fields_"));
			*(void **)__this = Test_Fields__obj::_hx_vtable;
			return __this;
		}

		static void * _hx_vtable;
		static Dynamic __CreateEmpty();
		static Dynamic __Create(::hx::DynamicArray inArgs);
		//~Test_Fields__obj();

		HX_DO_RTTI_ALL;
		static bool __GetStatic(const ::String &inString, Dynamic &outValue, ::hx::PropertyAccess inCallProp);
		static void __register();
		bool _hx_isInstanceOf(int inClassId);
		::String __ToString() const { return HX_("Test_Fields_",99,53,9f,64); }

		static void main();
		static ::Dynamic main_dyn();

};

} // end namespace _Test

#endif /* INCLUDED__Test_Test_Fields_ */ 

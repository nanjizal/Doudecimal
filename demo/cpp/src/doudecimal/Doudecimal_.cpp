// Generated by Haxe 4.3.0-rc.1+
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_doudecimal_Doudecimal_
#include <doudecimal/Doudecimal_.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif

HX_DEFINE_STACK_FRAME(_hx_pos_8e21bcc1365be68a_32_new,"doudecimal.Doudecimal_","new",0xd8cca4e3,"doudecimal.Doudecimal_.new","doudecimal/Doudecimal.hx",32,0x5c8bf5af)
static const ::String _hx_array_data_1c01f771_3[] = {
	HX_("A",41,00,00,00),
};
static const ::String _hx_array_data_1c01f771_4[] = {
	HX_("B",42,00,00,00),
};
static const ::String _hx_array_data_1c01f771_5[] = {
	HX_("-",2d,00,00,00),
};
static const ::String _hx_array_data_1c01f771_6[] = {
	HX_("0",30,00,00,00),
};
static const ::String _hx_array_data_1c01f771_7[] = {
	HX_("1",31,00,00,00),
};
static const ::String _hx_array_data_1c01f771_8[] = {
	HX_("2",32,00,00,00),
};
static const ::String _hx_array_data_1c01f771_9[] = {
	HX_("3",33,00,00,00),
};
static const ::String _hx_array_data_1c01f771_10[] = {
	HX_("4",34,00,00,00),
};
static const ::String _hx_array_data_1c01f771_11[] = {
	HX_("5",35,00,00,00),
};
static const ::String _hx_array_data_1c01f771_12[] = {
	HX_("6",36,00,00,00),
};
static const ::String _hx_array_data_1c01f771_13[] = {
	HX_("7",37,00,00,00),
};
static const ::String _hx_array_data_1c01f771_14[] = {
	HX_("8",38,00,00,00),
};
static const ::String _hx_array_data_1c01f771_15[] = {
	HX_("9",39,00,00,00),
};
static const ::String _hx_array_data_1c01f771_16[] = {
	HX_(";",3b,00,00,00),
};
static const ::String _hx_array_data_1c01f771_17[] = {
	HX_("A",41,00,00,00),
};
static const ::String _hx_array_data_1c01f771_18[] = {
	HX_("B",42,00,00,00),
};
static const ::String _hx_array_data_1c01f771_19[] = {
	HX_("B",42,00,00,00),
};
static const ::String _hx_array_data_1c01f771_20[] = {
	HX_("A",41,00,00,00),
};
static const ::String _hx_array_data_1c01f771_21[] = {
	HX_("A",41,00,00,00),
};
static const ::String _hx_array_data_1c01f771_22[] = {
	HX_("B",42,00,00,00),
};
static const ::String _hx_array_data_1c01f771_23[] = {
	HX_("A",41,00,00,00),
};
static const ::String _hx_array_data_1c01f771_24[] = {
	HX_("B",42,00,00,00),
};
static const ::String _hx_array_data_1c01f771_25[] = {
	HX_("A",41,00,00,00),
};
static const ::String _hx_array_data_1c01f771_26[] = {
	HX_("A",41,00,00,00),
};
static const ::String _hx_array_data_1c01f771_27[] = {
	HX_("B",42,00,00,00),
};
static const ::String _hx_array_data_1c01f771_28[] = {
	HX_("A",41,00,00,00),
};
static const ::String _hx_array_data_1c01f771_29[] = {
	HX_("B",42,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_8e21bcc1365be68a_38_toString,"doudecimal.Doudecimal_","toString",0xb635c149,"doudecimal.Doudecimal_.toString","doudecimal/Doudecimal.hx",38,0x5c8bf5af)
HX_LOCAL_STACK_FRAME(_hx_pos_8e21bcc1365be68a_114_checkStr,"doudecimal.Doudecimal_","checkStr",0x2ab16566,"doudecimal.Doudecimal_.checkStr","doudecimal/Doudecimal.hx",114,0x5c8bf5af)
static const ::String _hx_array_data_1c01f771_33[] = {
	HX_("A",41,00,00,00),
};
static const ::String _hx_array_data_1c01f771_34[] = {
	HX_("B",42,00,00,00),
};
static const ::String _hx_array_data_1c01f771_35[] = {
	HX_("-",2d,00,00,00),
};
static const ::String _hx_array_data_1c01f771_36[] = {
	HX_("0",30,00,00,00),
};
static const ::String _hx_array_data_1c01f771_37[] = {
	HX_("1",31,00,00,00),
};
static const ::String _hx_array_data_1c01f771_38[] = {
	HX_("2",32,00,00,00),
};
static const ::String _hx_array_data_1c01f771_39[] = {
	HX_("3",33,00,00,00),
};
static const ::String _hx_array_data_1c01f771_40[] = {
	HX_("4",34,00,00,00),
};
static const ::String _hx_array_data_1c01f771_41[] = {
	HX_("5",35,00,00,00),
};
static const ::String _hx_array_data_1c01f771_42[] = {
	HX_("6",36,00,00,00),
};
static const ::String _hx_array_data_1c01f771_43[] = {
	HX_("7",37,00,00,00),
};
static const ::String _hx_array_data_1c01f771_44[] = {
	HX_("8",38,00,00,00),
};
static const ::String _hx_array_data_1c01f771_45[] = {
	HX_("9",39,00,00,00),
};
static const ::String _hx_array_data_1c01f771_46[] = {
	HX_(";",3b,00,00,00),
};
static const ::String _hx_array_data_1c01f771_47[] = {
	HX_("A",41,00,00,00),
};
static const ::String _hx_array_data_1c01f771_48[] = {
	HX_("B",42,00,00,00),
};
static const ::String _hx_array_data_1c01f771_49[] = {
	HX_("B",42,00,00,00),
};
static const ::String _hx_array_data_1c01f771_50[] = {
	HX_("A",41,00,00,00),
};
static const ::String _hx_array_data_1c01f771_51[] = {
	HX_("A",41,00,00,00),
};
static const ::String _hx_array_data_1c01f771_52[] = {
	HX_("B",42,00,00,00),
};
static const ::String _hx_array_data_1c01f771_53[] = {
	HX_("A",41,00,00,00),
};
static const ::String _hx_array_data_1c01f771_54[] = {
	HX_("B",42,00,00,00),
};
static const ::String _hx_array_data_1c01f771_55[] = {
	HX_("A",41,00,00,00),
};
static const ::String _hx_array_data_1c01f771_56[] = {
	HX_("A",41,00,00,00),
};
static const ::String _hx_array_data_1c01f771_57[] = {
	HX_("B",42,00,00,00),
};
static const ::String _hx_array_data_1c01f771_58[] = {
	HX_("A",41,00,00,00),
};
static const ::String _hx_array_data_1c01f771_59[] = {
	HX_("B",42,00,00,00),
};
HX_LOCAL_STACK_FRAME(_hx_pos_8e21bcc1365be68a_186_toDozenal,"doudecimal.Doudecimal_","toDozenal",0xe1d8602b,"doudecimal.Doudecimal_.toDozenal","doudecimal/Doudecimal.hx",186,0x5c8bf5af)
HX_LOCAL_STACK_FRAME(_hx_pos_8e21bcc1365be68a_444_toInt,"doudecimal.Doudecimal_","toInt",0x9bcaf977,"doudecimal.Doudecimal_.toInt","doudecimal/Doudecimal.hx",444,0x5c8bf5af)
HX_LOCAL_STACK_FRAME(_hx_pos_8e21bcc1365be68a_245_fromDigit,"doudecimal.Doudecimal_","fromDigit",0x1e9c70a6,"doudecimal.Doudecimal_.fromDigit","doudecimal/Doudecimal.hx",245,0x5c8bf5af)
HX_LOCAL_STACK_FRAME(_hx_pos_8e21bcc1365be68a_256_toDigit,"doudecimal.Doudecimal_","toDigit",0x7b3d0c35,"doudecimal.Doudecimal_.toDigit","doudecimal/Doudecimal.hx",256,0x5c8bf5af)
HX_LOCAL_STACK_FRAME(_hx_pos_8e21bcc1365be68a_265_fromInt,"doudecimal.Doudecimal_","fromInt",0x2cebafa8,"doudecimal.Doudecimal_.fromInt","doudecimal/Doudecimal.hx",265,0x5c8bf5af)
HX_LOCAL_STACK_FRAME(_hx_pos_8e21bcc1365be68a_287_convert,"doudecimal.Doudecimal_","convert",0xefbacff6,"doudecimal.Doudecimal_.convert","doudecimal/Doudecimal.hx",287,0x5c8bf5af)
namespace doudecimal{

void Doudecimal__obj::__construct(::String doudecimal){
            	HX_GC_STACKFRAME(&_hx_pos_8e21bcc1365be68a_32_new)
HXLINE(  33)		int len = doudecimal.length;
HXDLIN(  33)		::StringBuf b = ::StringBuf_obj::__alloc( HX_CTX );
HXDLIN(  33)		int no = 0;
HXDLIN(  33)		{
HXLINE(  33)			int _g = 0;
HXDLIN(  33)			int _g1 = len;
HXDLIN(  33)			while((_g < _g1)){
HXLINE(  33)				_g = (_g + 1);
HXDLIN(  33)				int i = (_g - 1);
HXDLIN(  33)				no = doudecimal.cca(i);
HXDLIN(  33)				switch((int)(no)){
            					case (int)35: {
HXLINE(  33)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  33)							b->flush();
            						}
HXDLIN(  33)						if (::hx::IsNull( b->b )) {
HXLINE(  33)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_3,1);
            						}
            						else {
HXLINE(  33)							b->b->push(HX_("A",41,00,00,00));
            						}
            					}
            					break;
            					case (int)42: {
HXLINE(  33)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  33)							b->flush();
            						}
HXDLIN(  33)						if (::hx::IsNull( b->b )) {
HXLINE(  33)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_4,1);
            						}
            						else {
HXLINE(  33)							b->b->push(HX_("B",42,00,00,00));
            						}
            					}
            					break;
            					case (int)45: {
HXLINE(  33)						if ((i == 0)) {
HXLINE(  33)							if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  33)								b->flush();
            							}
HXDLIN(  33)							if (::hx::IsNull( b->b )) {
HXLINE(  33)								b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_5,1);
            							}
            							else {
HXLINE(  33)								b->b->push(HX_("-",2d,00,00,00));
            							}
            						}
            						else {
HXLINE(  33)							HX_STACK_DO_THROW(HX_("invalid Doudecimal",f0,cd,48,30));
            						}
            					}
            					break;
            					case (int)48: {
HXLINE(  33)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  33)							b->flush();
            						}
HXDLIN(  33)						if (::hx::IsNull( b->b )) {
HXLINE(  33)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_6,1);
            						}
            						else {
HXLINE(  33)							b->b->push(HX_("0",30,00,00,00));
            						}
            					}
            					break;
            					case (int)49: {
HXLINE(  33)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  33)							b->flush();
            						}
HXDLIN(  33)						if (::hx::IsNull( b->b )) {
HXLINE(  33)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_7,1);
            						}
            						else {
HXLINE(  33)							b->b->push(HX_("1",31,00,00,00));
            						}
            					}
            					break;
            					case (int)50: {
HXLINE(  33)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  33)							b->flush();
            						}
HXDLIN(  33)						if (::hx::IsNull( b->b )) {
HXLINE(  33)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_8,1);
            						}
            						else {
HXLINE(  33)							b->b->push(HX_("2",32,00,00,00));
            						}
            					}
            					break;
            					case (int)51: {
HXLINE(  33)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  33)							b->flush();
            						}
HXDLIN(  33)						if (::hx::IsNull( b->b )) {
HXLINE(  33)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_9,1);
            						}
            						else {
HXLINE(  33)							b->b->push(HX_("3",33,00,00,00));
            						}
            					}
            					break;
            					case (int)52: {
HXLINE(  33)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  33)							b->flush();
            						}
HXDLIN(  33)						if (::hx::IsNull( b->b )) {
HXLINE(  33)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_10,1);
            						}
            						else {
HXLINE(  33)							b->b->push(HX_("4",34,00,00,00));
            						}
            					}
            					break;
            					case (int)53: {
HXLINE(  33)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  33)							b->flush();
            						}
HXDLIN(  33)						if (::hx::IsNull( b->b )) {
HXLINE(  33)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_11,1);
            						}
            						else {
HXLINE(  33)							b->b->push(HX_("5",35,00,00,00));
            						}
            					}
            					break;
            					case (int)54: {
HXLINE(  33)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  33)							b->flush();
            						}
HXDLIN(  33)						if (::hx::IsNull( b->b )) {
HXLINE(  33)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_12,1);
            						}
            						else {
HXLINE(  33)							b->b->push(HX_("6",36,00,00,00));
            						}
            					}
            					break;
            					case (int)55: {
HXLINE(  33)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  33)							b->flush();
            						}
HXDLIN(  33)						if (::hx::IsNull( b->b )) {
HXLINE(  33)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_13,1);
            						}
            						else {
HXLINE(  33)							b->b->push(HX_("7",37,00,00,00));
            						}
            					}
            					break;
            					case (int)56: {
HXLINE(  33)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  33)							b->flush();
            						}
HXDLIN(  33)						if (::hx::IsNull( b->b )) {
HXLINE(  33)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_14,1);
            						}
            						else {
HXLINE(  33)							b->b->push(HX_("8",38,00,00,00));
            						}
            					}
            					break;
            					case (int)57: {
HXLINE(  33)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  33)							b->flush();
            						}
HXDLIN(  33)						if (::hx::IsNull( b->b )) {
HXLINE(  33)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_15,1);
            						}
            						else {
HXLINE(  33)							b->b->push(HX_("9",39,00,00,00));
            						}
            					}
            					break;
            					case (int)59: {
HXLINE(  33)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  33)							b->flush();
            						}
HXDLIN(  33)						if (::hx::IsNull( b->b )) {
HXLINE(  33)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_16,1);
            						}
            						else {
HXLINE(  33)							b->b->push(HX_(";",3b,00,00,00));
            						}
            					}
            					break;
            					case (int)65: {
HXLINE(  33)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  33)							b->flush();
            						}
HXDLIN(  33)						if (::hx::IsNull( b->b )) {
HXLINE(  33)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_17,1);
            						}
            						else {
HXLINE(  33)							b->b->push(HX_("A",41,00,00,00));
            						}
            					}
            					break;
            					case (int)66: {
HXLINE(  33)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  33)							b->flush();
            						}
HXDLIN(  33)						if (::hx::IsNull( b->b )) {
HXLINE(  33)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_18,1);
            						}
            						else {
HXLINE(  33)							b->b->push(HX_("B",42,00,00,00));
            						}
            					}
            					break;
            					case (int)69: {
HXLINE(  33)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  33)							b->flush();
            						}
HXDLIN(  33)						if (::hx::IsNull( b->b )) {
HXLINE(  33)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_19,1);
            						}
            						else {
HXLINE(  33)							b->b->push(HX_("B",42,00,00,00));
            						}
            					}
            					break;
            					case (int)84: {
HXLINE(  33)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  33)							b->flush();
            						}
HXDLIN(  33)						if (::hx::IsNull( b->b )) {
HXLINE(  33)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_20,1);
            						}
            						else {
HXLINE(  33)							b->b->push(HX_("A",41,00,00,00));
            						}
            					}
            					break;
            					case (int)88: {
HXLINE(  33)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  33)							b->flush();
            						}
HXDLIN(  33)						if (::hx::IsNull( b->b )) {
HXLINE(  33)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_21,1);
            						}
            						else {
HXLINE(  33)							b->b->push(HX_("A",41,00,00,00));
            						}
            					}
            					break;
            					case (int)90: {
HXLINE(  33)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  33)							b->flush();
            						}
HXDLIN(  33)						if (::hx::IsNull( b->b )) {
HXLINE(  33)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_22,1);
            						}
            						else {
HXLINE(  33)							b->b->push(HX_("B",42,00,00,00));
            						}
            					}
            					break;
            					case (int)97: {
HXLINE(  33)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  33)							b->flush();
            						}
HXDLIN(  33)						if (::hx::IsNull( b->b )) {
HXLINE(  33)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_23,1);
            						}
            						else {
HXLINE(  33)							b->b->push(HX_("A",41,00,00,00));
            						}
            					}
            					break;
            					case (int)98: {
HXLINE(  33)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  33)							b->flush();
            						}
HXDLIN(  33)						if (::hx::IsNull( b->b )) {
HXLINE(  33)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_24,1);
            						}
            						else {
HXLINE(  33)							b->b->push(HX_("B",42,00,00,00));
            						}
            					}
            					break;
            					case (int)102: {
HXLINE(  33)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  33)							b->flush();
            						}
HXDLIN(  33)						if (::hx::IsNull( b->b )) {
HXLINE(  33)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_25,1);
            						}
            						else {
HXLINE(  33)							b->b->push(HX_("A",41,00,00,00));
            						}
            					}
            					break;
            					case (int)116: {
HXLINE(  33)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  33)							b->flush();
            						}
HXDLIN(  33)						if (::hx::IsNull( b->b )) {
HXLINE(  33)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_26,1);
            						}
            						else {
HXLINE(  33)							b->b->push(HX_("A",41,00,00,00));
            						}
            					}
            					break;
            					case (int)122: {
HXLINE(  33)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  33)							b->flush();
            						}
HXDLIN(  33)						if (::hx::IsNull( b->b )) {
HXLINE(  33)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_27,1);
            						}
            						else {
HXLINE(  33)							b->b->push(HX_("B",42,00,00,00));
            						}
            					}
            					break;
            					case (int)8586: {
HXLINE(  33)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  33)							b->flush();
            						}
HXDLIN(  33)						if (::hx::IsNull( b->b )) {
HXLINE(  33)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_28,1);
            						}
            						else {
HXLINE(  33)							b->b->push(HX_("A",41,00,00,00));
            						}
            					}
            					break;
            					case (int)8587: {
HXLINE(  33)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  33)							b->flush();
            						}
HXDLIN(  33)						if (::hx::IsNull( b->b )) {
HXLINE(  33)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_29,1);
            						}
            						else {
HXLINE(  33)							b->b->push(HX_("B",42,00,00,00));
            						}
            					}
            					break;
            					default:{
HXLINE(  33)						HX_STACK_DO_THROW(HX_("invalid Doudecimal",f0,cd,48,30));
            					}
            				}
            			}
            		}
HXDLIN(  33)		this->doudecimal = b->toString();
HXLINE(  34)		int len1 = this->doudecimal.length;
HXDLIN(  34)		int n = (len1 - 1);
HXDLIN(  34)		Float multi;
HXDLIN(  34)		Float out = ((Float)0.);
HXDLIN(  34)		::String dozit = HX_("",00,00,00,00);
HXDLIN(  34)		bool negative = false;
HXDLIN(  34)		if ((this->doudecimal.charAt(0) == HX_("-",2d,00,00,00))) {
HXLINE(  34)			this->doudecimal = this->doudecimal.substr(1,null());
HXDLIN(  34)			len1 = this->doudecimal.length;
HXDLIN(  34)			negative = true;
            		}
HXDLIN(  34)		{
HXLINE(  34)			int _g2 = 0;
HXDLIN(  34)			int _g3 = len1;
HXDLIN(  34)			while((_g2 < _g3)){
HXLINE(  34)				_g2 = (_g2 + 1);
HXDLIN(  34)				int i = (_g2 - 1);
HXDLIN(  34)				multi = ::Math_obj::pow(( (Float)(12) ),( (Float)(n) ));
HXDLIN(  34)				dozit = this->doudecimal.charAt(i);
HXDLIN(  34)				 ::Dynamic no;
HXDLIN(  34)				if ((dozit == HX_("A",41,00,00,00))) {
HXLINE(  34)					no = 10;
            				}
            				else {
HXLINE(  34)					if ((dozit == HX_("B",42,00,00,00))) {
HXLINE(  34)						no = 11;
            					}
            					else {
HXLINE(  34)						no = ::Std_obj::parseInt(dozit);
            					}
            				}
HXDLIN(  34)				out = (out + (multi * ( (Float)(no) )));
HXDLIN(  34)				n = (n - 1);
            			}
            		}
HXDLIN(  34)		int _hx_tmp;
HXDLIN(  34)		if (negative) {
HXLINE(  34)			_hx_tmp = -(::Std_obj::_hx_int(out));
            		}
            		else {
HXLINE(  34)			_hx_tmp = ::Std_obj::_hx_int(out);
            		}
HXDLIN(  34)		this->_hx_int = _hx_tmp;
            	}

Dynamic Doudecimal__obj::__CreateEmpty() { return new Doudecimal__obj; }

void *Doudecimal__obj::_hx_vtable = 0;

Dynamic Doudecimal__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Doudecimal__obj > _hx_result = new Doudecimal__obj();
	_hx_result->__construct(inArgs[0]);
	return _hx_result;
}

bool Doudecimal__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x73bdb1f1;
}

::String Doudecimal__obj::toString(){
            	HX_STACKFRAME(&_hx_pos_8e21bcc1365be68a_38_toString)
HXDLIN(  38)		return this->doudecimal;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Doudecimal__obj,toString,return )

::String Doudecimal__obj::checkStr(::String s){
            	HX_GC_STACKFRAME(&_hx_pos_8e21bcc1365be68a_114_checkStr)
HXLINE( 115)		int len = s.length;
HXLINE( 116)		::StringBuf b = ::StringBuf_obj::__alloc( HX_CTX );
HXLINE( 117)		int no = 0;
HXLINE( 118)		{
HXLINE( 118)			int _g = 0;
HXDLIN( 118)			int _g1 = len;
HXDLIN( 118)			while((_g < _g1)){
HXLINE( 118)				_g = (_g + 1);
HXDLIN( 118)				int i = (_g - 1);
HXLINE( 119)				no = s.cca(i);
HXLINE( 120)				switch((int)(no)){
            					case (int)35: {
HXLINE( 170)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 170)							b->flush();
            						}
HXDLIN( 170)						if (::hx::IsNull( b->b )) {
HXLINE( 170)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_33,1);
            						}
            						else {
HXLINE( 170)							b->b->push(HX_("A",41,00,00,00));
            						}
            					}
            					break;
            					case (int)42: {
HXLINE( 172)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 172)							b->flush();
            						}
HXDLIN( 172)						if (::hx::IsNull( b->b )) {
HXLINE( 172)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_34,1);
            						}
            						else {
HXLINE( 172)							b->b->push(HX_("B",42,00,00,00));
            						}
            					}
            					break;
            					case (int)45: {
HXLINE( 174)						if ((i == 0)) {
HXLINE( 175)							if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 175)								b->flush();
            							}
HXDLIN( 175)							if (::hx::IsNull( b->b )) {
HXLINE( 175)								b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_35,1);
            							}
            							else {
HXLINE( 175)								b->b->push(HX_("-",2d,00,00,00));
            							}
            						}
            						else {
HXLINE( 177)							HX_STACK_DO_THROW(HX_("invalid Doudecimal",f0,cd,48,30));
            						}
            					}
            					break;
            					case (int)48: {
HXLINE( 122)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 122)							b->flush();
            						}
HXDLIN( 122)						if (::hx::IsNull( b->b )) {
HXLINE( 122)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_36,1);
            						}
            						else {
HXLINE( 122)							b->b->push(HX_("0",30,00,00,00));
            						}
            					}
            					break;
            					case (int)49: {
HXLINE( 124)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 124)							b->flush();
            						}
HXDLIN( 124)						if (::hx::IsNull( b->b )) {
HXLINE( 124)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_37,1);
            						}
            						else {
HXLINE( 124)							b->b->push(HX_("1",31,00,00,00));
            						}
            					}
            					break;
            					case (int)50: {
HXLINE( 126)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 126)							b->flush();
            						}
HXDLIN( 126)						if (::hx::IsNull( b->b )) {
HXLINE( 126)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_38,1);
            						}
            						else {
HXLINE( 126)							b->b->push(HX_("2",32,00,00,00));
            						}
            					}
            					break;
            					case (int)51: {
HXLINE( 128)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 128)							b->flush();
            						}
HXDLIN( 128)						if (::hx::IsNull( b->b )) {
HXLINE( 128)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_39,1);
            						}
            						else {
HXLINE( 128)							b->b->push(HX_("3",33,00,00,00));
            						}
            					}
            					break;
            					case (int)52: {
HXLINE( 130)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 130)							b->flush();
            						}
HXDLIN( 130)						if (::hx::IsNull( b->b )) {
HXLINE( 130)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_40,1);
            						}
            						else {
HXLINE( 130)							b->b->push(HX_("4",34,00,00,00));
            						}
            					}
            					break;
            					case (int)53: {
HXLINE( 132)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 132)							b->flush();
            						}
HXDLIN( 132)						if (::hx::IsNull( b->b )) {
HXLINE( 132)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_41,1);
            						}
            						else {
HXLINE( 132)							b->b->push(HX_("5",35,00,00,00));
            						}
            					}
            					break;
            					case (int)54: {
HXLINE( 134)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 134)							b->flush();
            						}
HXDLIN( 134)						if (::hx::IsNull( b->b )) {
HXLINE( 134)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_42,1);
            						}
            						else {
HXLINE( 134)							b->b->push(HX_("6",36,00,00,00));
            						}
            					}
            					break;
            					case (int)55: {
HXLINE( 136)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 136)							b->flush();
            						}
HXDLIN( 136)						if (::hx::IsNull( b->b )) {
HXLINE( 136)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_43,1);
            						}
            						else {
HXLINE( 136)							b->b->push(HX_("7",37,00,00,00));
            						}
            					}
            					break;
            					case (int)56: {
HXLINE( 138)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 138)							b->flush();
            						}
HXDLIN( 138)						if (::hx::IsNull( b->b )) {
HXLINE( 138)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_44,1);
            						}
            						else {
HXLINE( 138)							b->b->push(HX_("8",38,00,00,00));
            						}
            					}
            					break;
            					case (int)57: {
HXLINE( 140)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 140)							b->flush();
            						}
HXDLIN( 140)						if (::hx::IsNull( b->b )) {
HXLINE( 140)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_45,1);
            						}
            						else {
HXLINE( 140)							b->b->push(HX_("9",39,00,00,00));
            						}
            					}
            					break;
            					case (int)59: {
HXLINE( 164)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 164)							b->flush();
            						}
HXDLIN( 164)						if (::hx::IsNull( b->b )) {
HXLINE( 164)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_46,1);
            						}
            						else {
HXLINE( 164)							b->b->push(HX_(";",3b,00,00,00));
            						}
            					}
            					break;
            					case (int)65: {
HXLINE( 146)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 146)							b->flush();
            						}
HXDLIN( 146)						if (::hx::IsNull( b->b )) {
HXLINE( 146)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_47,1);
            						}
            						else {
HXLINE( 146)							b->b->push(HX_("A",41,00,00,00));
            						}
            					}
            					break;
            					case (int)66: {
HXLINE( 148)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 148)							b->flush();
            						}
HXDLIN( 148)						if (::hx::IsNull( b->b )) {
HXLINE( 148)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_48,1);
            						}
            						else {
HXLINE( 148)							b->b->push(HX_("B",42,00,00,00));
            						}
            					}
            					break;
            					case (int)69: {
HXLINE( 158)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 158)							b->flush();
            						}
HXDLIN( 158)						if (::hx::IsNull( b->b )) {
HXLINE( 158)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_49,1);
            						}
            						else {
HXLINE( 158)							b->b->push(HX_("B",42,00,00,00));
            						}
            					}
            					break;
            					case (int)84: {
HXLINE( 150)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 150)							b->flush();
            						}
HXDLIN( 150)						if (::hx::IsNull( b->b )) {
HXLINE( 150)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_50,1);
            						}
            						else {
HXLINE( 150)							b->b->push(HX_("A",41,00,00,00));
            						}
            					}
            					break;
            					case (int)88: {
HXLINE( 154)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 154)							b->flush();
            						}
HXDLIN( 154)						if (::hx::IsNull( b->b )) {
HXLINE( 154)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_51,1);
            						}
            						else {
HXLINE( 154)							b->b->push(HX_("A",41,00,00,00));
            						}
            					}
            					break;
            					case (int)90: {
HXLINE( 160)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 160)							b->flush();
            						}
HXDLIN( 160)						if (::hx::IsNull( b->b )) {
HXLINE( 160)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_52,1);
            						}
            						else {
HXLINE( 160)							b->b->push(HX_("B",42,00,00,00));
            						}
            					}
            					break;
            					case (int)97: {
HXLINE( 142)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 142)							b->flush();
            						}
HXDLIN( 142)						if (::hx::IsNull( b->b )) {
HXLINE( 142)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_53,1);
            						}
            						else {
HXLINE( 142)							b->b->push(HX_("A",41,00,00,00));
            						}
            					}
            					break;
            					case (int)98: {
HXLINE( 144)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 144)							b->flush();
            						}
HXDLIN( 144)						if (::hx::IsNull( b->b )) {
HXLINE( 144)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_54,1);
            						}
            						else {
HXLINE( 144)							b->b->push(HX_("B",42,00,00,00));
            						}
            					}
            					break;
            					case (int)102: {
HXLINE( 156)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 156)							b->flush();
            						}
HXDLIN( 156)						if (::hx::IsNull( b->b )) {
HXLINE( 156)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_55,1);
            						}
            						else {
HXLINE( 156)							b->b->push(HX_("A",41,00,00,00));
            						}
            					}
            					break;
            					case (int)116: {
HXLINE( 152)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 152)							b->flush();
            						}
HXDLIN( 152)						if (::hx::IsNull( b->b )) {
HXLINE( 152)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_56,1);
            						}
            						else {
HXLINE( 152)							b->b->push(HX_("A",41,00,00,00));
            						}
            					}
            					break;
            					case (int)122: {
HXLINE( 162)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 162)							b->flush();
            						}
HXDLIN( 162)						if (::hx::IsNull( b->b )) {
HXLINE( 162)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_57,1);
            						}
            						else {
HXLINE( 162)							b->b->push(HX_("B",42,00,00,00));
            						}
            					}
            					break;
            					case (int)8586: {
HXLINE( 166)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 166)							b->flush();
            						}
HXDLIN( 166)						if (::hx::IsNull( b->b )) {
HXLINE( 166)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_58,1);
            						}
            						else {
HXLINE( 166)							b->b->push(HX_("A",41,00,00,00));
            						}
            					}
            					break;
            					case (int)8587: {
HXLINE( 168)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 168)							b->flush();
            						}
HXDLIN( 168)						if (::hx::IsNull( b->b )) {
HXLINE( 168)							b->b = ::Array_obj< ::String >::fromData( _hx_array_data_1c01f771_59,1);
            						}
            						else {
HXLINE( 168)							b->b->push(HX_("B",42,00,00,00));
            						}
            					}
            					break;
            					default:{
HXLINE( 180)						HX_STACK_DO_THROW(HX_("invalid Doudecimal",f0,cd,48,30));
            					}
            				}
            			}
            		}
HXLINE( 183)		return b->toString();
            	}


HX_DEFINE_DYNAMIC_FUNC1(Doudecimal__obj,checkStr,return )

::String Doudecimal__obj::toDozenal(){
            	HX_GC_STACKFRAME(&_hx_pos_8e21bcc1365be68a_186_toDozenal)
HXLINE( 187)		int len = this->doudecimal.length;
HXLINE( 188)		int no;
HXLINE( 189)		::StringBuf b = ::StringBuf_obj::__alloc( HX_CTX );
HXLINE( 190)		{
HXLINE( 190)			int _g = 0;
HXDLIN( 190)			int _g1 = len;
HXDLIN( 190)			while((_g < _g1)){
HXLINE( 190)				_g = (_g + 1);
HXDLIN( 190)				int i = (_g - 1);
HXLINE( 191)				no = this->doudecimal.cca(i);
HXLINE( 192)				{
HXLINE( 192)					::String x;
HXDLIN( 192)					switch((int)(no)){
            						case (int)65: {
HXLINE( 192)							x = HX_W(u"\u218a",f2a6,00ab);
            						}
            						break;
            						case (int)66: {
HXLINE( 192)							x = HX_W(u"\u218b",f2a7,00ab);
            						}
            						break;
            						default:{
HXLINE( 192)							x = ::String::fromCharCode(no);
            						}
            					}
HXDLIN( 192)					if (::hx::IsNotNull( b->charBuf )) {
HXLINE( 192)						b->flush();
            					}
HXDLIN( 192)					if (::hx::IsNull( b->b )) {
HXLINE( 192)						b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(x));
            					}
            					else {
HXLINE( 192)						::Array< ::String > b1 = b->b;
HXDLIN( 192)						b1->push(::Std_obj::string(x));
            					}
            				}
            			}
            		}
HXLINE( 201)		return b->toString();
            	}


HX_DEFINE_DYNAMIC_FUNC0(Doudecimal__obj,toDozenal,return )

int Doudecimal__obj::toInt(){
            	HX_STACKFRAME(&_hx_pos_8e21bcc1365be68a_444_toInt)
HXLINE( 445)		int len = this->doudecimal.length;
HXLINE( 446)		int n = (len - 1);
HXLINE( 447)		Float multi;
HXLINE( 448)		Float out = ((Float)0.);
HXLINE( 449)		Float no = ((Float)0.);
HXLINE( 450)		::String dozit = HX_("",00,00,00,00);
HXLINE( 451)		bool negative = false;
HXLINE( 452)		if ((this->doudecimal.charAt(0) == HX_("-",2d,00,00,00))) {
HXLINE( 453)			this->doudecimal = this->doudecimal.substr(1,null());
HXLINE( 454)			len = this->doudecimal.length;
HXLINE( 455)			negative = true;
            		}
HXLINE( 457)		{
HXLINE( 457)			int _g = 0;
HXDLIN( 457)			int _g1 = len;
HXDLIN( 457)			while((_g < _g1)){
HXLINE( 457)				_g = (_g + 1);
HXDLIN( 457)				int i = (_g - 1);
HXLINE( 458)				multi = ::Math_obj::pow(( (Float)(12) ),( (Float)(n) ));
HXLINE( 459)				dozit = this->doudecimal.charAt(i);
HXLINE( 460)				 ::Dynamic no;
HXDLIN( 460)				if ((dozit == HX_("A",41,00,00,00))) {
HXLINE( 460)					no = 10;
            				}
            				else {
HXLINE( 462)					if ((dozit == HX_("B",42,00,00,00))) {
HXLINE( 460)						no = 11;
            					}
            					else {
HXLINE( 460)						no = ::Std_obj::parseInt(dozit);
            					}
            				}
HXLINE( 467)				out = (out + (multi * ( (Float)(no) )));
HXLINE( 468)				n = (n - 1);
            			}
            		}
HXLINE( 470)		if (negative) {
HXLINE( 470)			return -(::Std_obj::_hx_int(out));
            		}
            		else {
HXLINE( 470)			return ::Std_obj::_hx_int(out);
            		}
HXDLIN( 470)		return 0;
            	}


HX_DEFINE_DYNAMIC_FUNC0(Doudecimal__obj,toInt,return )

::String Doudecimal__obj::fromDigit(int dig){
            	HX_STACKFRAME(&_hx_pos_8e21bcc1365be68a_245_fromDigit)
HXDLIN( 245)		if ((dig < 10)) {
HXLINE( 246)			return ::Std_obj::string(dig);
            		}
            		else {
HXLINE( 247)			if ((dig == 10)) {
HXLINE( 248)				return HX_("A",41,00,00,00);
            			}
            			else {
HXLINE( 249)				if ((dig == 11)) {
HXLINE( 250)					return HX_("B",42,00,00,00);
            				}
            				else {
HXLINE( 252)					return HX_("?",3f,00,00,00);
            				}
            			}
            		}
HXLINE( 245)		return null();
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Doudecimal__obj,fromDigit,return )

int Doudecimal__obj::toDigit(::String str){
            	HX_STACKFRAME(&_hx_pos_8e21bcc1365be68a_256_toDigit)
HXDLIN( 256)		if ((str == HX_("A",41,00,00,00))) {
HXLINE( 257)			return 10;
            		}
            		else {
HXLINE( 258)			if ((str == HX_("B",42,00,00,00))) {
HXLINE( 259)				return 11;
            			}
            			else {
HXLINE( 261)				return ( (int)(::Std_obj::parseInt(str)) );
            			}
            		}
HXLINE( 256)		return 0;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Doudecimal__obj,toDigit,return )

::doudecimal::Doudecimal_ Doudecimal__obj::fromInt(int decimal){
            	HX_STACKFRAME(&_hx_pos_8e21bcc1365be68a_265_fromInt)
HXLINE( 266)		int tens = decimal;
HXLINE( 267)		::String s;
HXLINE( 268)		bool negative = false;
HXLINE( 269)		if ((decimal <= 0)) {
HXLINE( 270)			tens = -(decimal);
HXLINE( 271)			negative = true;
            		}
HXLINE( 273)		::String b = HX_("",00,00,00,00);
HXLINE( 274)		int targ = tens;
HXDLIN( 274)		int v10 = ::Std_obj::_hx_int(::Math_obj::pow(( (Float)(12) ),( (Float)(10) )));
HXDLIN( 274)		::haxe::Log_obj::trace(v10,::hx::SourceInfo(HX_("../src/doudecimal/Doudecimal.hx",e9,e7,c0,c6),289,HX_("doudecimal.Doudecimal_",71,f7,01,1c),HX_("convert",f3,fd,c9,1a)));
HXDLIN( 274)		int v9 = ::Std_obj::_hx_int(::Math_obj::pow(( (Float)(12) ),( (Float)(9) )));
HXDLIN( 274)		::haxe::Log_obj::trace(v9,::hx::SourceInfo(HX_("../src/doudecimal/Doudecimal.hx",e9,e7,c0,c6),291,HX_("doudecimal.Doudecimal_",71,f7,01,1c),HX_("convert",f3,fd,c9,1a)));
HXDLIN( 274)		int v8 = ::Std_obj::_hx_int(::Math_obj::pow(( (Float)(12) ),( (Float)(8) )));
HXDLIN( 274)		::haxe::Log_obj::trace(v8,::hx::SourceInfo(HX_("../src/doudecimal/Doudecimal.hx",e9,e7,c0,c6),293,HX_("doudecimal.Doudecimal_",71,f7,01,1c),HX_("convert",f3,fd,c9,1a)));
HXDLIN( 274)		int v7 = ::Std_obj::_hx_int(::Math_obj::pow(( (Float)(12) ),( (Float)(7) )));
HXDLIN( 274)		::haxe::Log_obj::trace(v7,::hx::SourceInfo(HX_("../src/doudecimal/Doudecimal.hx",e9,e7,c0,c6),295,HX_("doudecimal.Doudecimal_",71,f7,01,1c),HX_("convert",f3,fd,c9,1a)));
HXDLIN( 274)		int v6 = ::Std_obj::_hx_int(::Math_obj::pow(( (Float)(12) ),( (Float)(6) )));
HXDLIN( 274)		::haxe::Log_obj::trace(v6,::hx::SourceInfo(HX_("../src/doudecimal/Doudecimal.hx",e9,e7,c0,c6),297,HX_("doudecimal.Doudecimal_",71,f7,01,1c),HX_("convert",f3,fd,c9,1a)));
HXDLIN( 274)		int v5 = ::Std_obj::_hx_int(::Math_obj::pow(( (Float)(12) ),( (Float)(5) )));
HXDLIN( 274)		::haxe::Log_obj::trace(v5,::hx::SourceInfo(HX_("../src/doudecimal/Doudecimal.hx",e9,e7,c0,c6),299,HX_("doudecimal.Doudecimal_",71,f7,01,1c),HX_("convert",f3,fd,c9,1a)));
HXDLIN( 274)		int v4 = ::Std_obj::_hx_int(::Math_obj::pow(( (Float)(12) ),( (Float)(4) )));
HXDLIN( 274)		::haxe::Log_obj::trace(v4,::hx::SourceInfo(HX_("../src/doudecimal/Doudecimal.hx",e9,e7,c0,c6),301,HX_("doudecimal.Doudecimal_",71,f7,01,1c),HX_("convert",f3,fd,c9,1a)));
HXDLIN( 274)		int v3 = ::Std_obj::_hx_int(::Math_obj::pow(( (Float)(12) ),( (Float)(3) )));
HXDLIN( 274)		::haxe::Log_obj::trace(v3,::hx::SourceInfo(HX_("../src/doudecimal/Doudecimal.hx",e9,e7,c0,c6),303,HX_("doudecimal.Doudecimal_",71,f7,01,1c),HX_("convert",f3,fd,c9,1a)));
HXDLIN( 274)		int v2 = ::Std_obj::_hx_int(::Math_obj::pow(( (Float)(12) ),( (Float)(2) )));
HXDLIN( 274)		::haxe::Log_obj::trace(v2,::hx::SourceInfo(HX_("../src/doudecimal/Doudecimal.hx",e9,e7,c0,c6),305,HX_("doudecimal.Doudecimal_",71,f7,01,1c),HX_("convert",f3,fd,c9,1a)));
HXDLIN( 274)		int v1 = 12;
HXDLIN( 274)		::haxe::Log_obj::trace(v1,::hx::SourceInfo(HX_("../src/doudecimal/Doudecimal.hx",e9,e7,c0,c6),307,HX_("doudecimal.Doudecimal_",71,f7,01,1c),HX_("convert",f3,fd,c9,1a)));
HXDLIN( 274)		::String s1 = HX_("",00,00,00,00);
HXDLIN( 274)		int o = 0;
HXDLIN( 274)		::String n = HX_("",00,00,00,00);
HXDLIN( 274)		o = 0;
HXDLIN( 274)		{
HXLINE( 274)			int _g = 0;
HXDLIN( 274)			while((_g < 12)){
HXLINE( 274)				_g = (_g + 1);
HXDLIN( 274)				int i = (_g - 1);
HXDLIN( 274)				if (((targ - v10) >= 0)) {
HXLINE( 274)					targ = (targ - v10);
HXDLIN( 274)					o = (o + 1);
            				}
            				else {
HXLINE( 274)					if ((o == 10)) {
HXLINE( 274)						n = HX_("A",41,00,00,00);
            					}
            					else {
HXLINE( 274)						if ((o == 11)) {
HXLINE( 274)							n = HX_("B",42,00,00,00);
            						}
            						else {
HXLINE( 274)							n = ::Std_obj::string(o);
            						}
            					}
HXDLIN( 274)					s1 = (s1 + n);
HXDLIN( 274)					goto _hx_goto_66;
            				}
            			}
            			_hx_goto_66:;
            		}
HXDLIN( 274)		o = 0;
HXDLIN( 274)		{
HXLINE( 274)			int _g1 = 0;
HXDLIN( 274)			while((_g1 < 12)){
HXLINE( 274)				_g1 = (_g1 + 1);
HXDLIN( 274)				int i = (_g1 - 1);
HXDLIN( 274)				if (((targ - v9) >= 0)) {
HXLINE( 274)					targ = (targ - v9);
HXDLIN( 274)					o = (o + 1);
            				}
            				else {
HXLINE( 274)					if ((o == 10)) {
HXLINE( 274)						n = HX_("A",41,00,00,00);
            					}
            					else {
HXLINE( 274)						if ((o == 11)) {
HXLINE( 274)							n = HX_("B",42,00,00,00);
            						}
            						else {
HXLINE( 274)							n = ::Std_obj::string(o);
            						}
            					}
HXDLIN( 274)					s1 = (s1 + n);
HXDLIN( 274)					goto _hx_goto_67;
            				}
            			}
            			_hx_goto_67:;
            		}
HXDLIN( 274)		o = 0;
HXDLIN( 274)		{
HXLINE( 274)			int _g2 = 0;
HXDLIN( 274)			while((_g2 < 12)){
HXLINE( 274)				_g2 = (_g2 + 1);
HXDLIN( 274)				int i = (_g2 - 1);
HXDLIN( 274)				if (((targ - v8) >= 0)) {
HXLINE( 274)					targ = (targ - v8);
HXDLIN( 274)					o = (o + 1);
            				}
            				else {
HXLINE( 274)					if ((o == 10)) {
HXLINE( 274)						n = HX_("A",41,00,00,00);
            					}
            					else {
HXLINE( 274)						if ((o == 11)) {
HXLINE( 274)							n = HX_("B",42,00,00,00);
            						}
            						else {
HXLINE( 274)							n = ::Std_obj::string(o);
            						}
            					}
HXDLIN( 274)					s1 = (s1 + n);
HXDLIN( 274)					goto _hx_goto_68;
            				}
            			}
            			_hx_goto_68:;
            		}
HXDLIN( 274)		o = 0;
HXDLIN( 274)		{
HXLINE( 274)			int _g3 = 0;
HXDLIN( 274)			while((_g3 < 12)){
HXLINE( 274)				_g3 = (_g3 + 1);
HXDLIN( 274)				int i = (_g3 - 1);
HXDLIN( 274)				if (((targ - v7) >= 0)) {
HXLINE( 274)					targ = (targ - v7);
HXDLIN( 274)					o = (o + 1);
            				}
            				else {
HXLINE( 274)					if ((o == 10)) {
HXLINE( 274)						n = HX_("A",41,00,00,00);
            					}
            					else {
HXLINE( 274)						if ((o == 11)) {
HXLINE( 274)							n = HX_("B",42,00,00,00);
            						}
            						else {
HXLINE( 274)							n = ::Std_obj::string(o);
            						}
            					}
HXDLIN( 274)					s1 = (s1 + n);
HXDLIN( 274)					goto _hx_goto_69;
            				}
            			}
            			_hx_goto_69:;
            		}
HXDLIN( 274)		o = 0;
HXDLIN( 274)		{
HXLINE( 274)			int _g4 = 0;
HXDLIN( 274)			while((_g4 < 12)){
HXLINE( 274)				_g4 = (_g4 + 1);
HXDLIN( 274)				int i = (_g4 - 1);
HXDLIN( 274)				if (((targ - v6) >= 0)) {
HXLINE( 274)					targ = (targ - v6);
HXDLIN( 274)					o = (o + 1);
            				}
            				else {
HXLINE( 274)					if ((o == 10)) {
HXLINE( 274)						n = HX_("A",41,00,00,00);
            					}
            					else {
HXLINE( 274)						if ((o == 11)) {
HXLINE( 274)							n = HX_("B",42,00,00,00);
            						}
            						else {
HXLINE( 274)							n = ::Std_obj::string(o);
            						}
            					}
HXDLIN( 274)					s1 = (s1 + n);
HXDLIN( 274)					goto _hx_goto_70;
            				}
            			}
            			_hx_goto_70:;
            		}
HXDLIN( 274)		o = 0;
HXDLIN( 274)		{
HXLINE( 274)			int _g5 = 0;
HXDLIN( 274)			while((_g5 < 12)){
HXLINE( 274)				_g5 = (_g5 + 1);
HXDLIN( 274)				int i = (_g5 - 1);
HXDLIN( 274)				if (((targ - v5) >= 0)) {
HXLINE( 274)					targ = (targ - v5);
HXDLIN( 274)					o = (o + 1);
            				}
            				else {
HXLINE( 274)					if ((o == 10)) {
HXLINE( 274)						n = HX_("A",41,00,00,00);
            					}
            					else {
HXLINE( 274)						if ((o == 11)) {
HXLINE( 274)							n = HX_("B",42,00,00,00);
            						}
            						else {
HXLINE( 274)							n = ::Std_obj::string(o);
            						}
            					}
HXDLIN( 274)					s1 = (s1 + n);
HXDLIN( 274)					goto _hx_goto_71;
            				}
            			}
            			_hx_goto_71:;
            		}
HXDLIN( 274)		o = 0;
HXDLIN( 274)		{
HXLINE( 274)			int _g6 = 0;
HXDLIN( 274)			while((_g6 < 12)){
HXLINE( 274)				_g6 = (_g6 + 1);
HXDLIN( 274)				int i = (_g6 - 1);
HXDLIN( 274)				if (((targ - v4) >= 0)) {
HXLINE( 274)					targ = (targ - v4);
HXDLIN( 274)					o = (o + 1);
            				}
            				else {
HXLINE( 274)					if ((o == 10)) {
HXLINE( 274)						n = HX_("A",41,00,00,00);
            					}
            					else {
HXLINE( 274)						if ((o == 11)) {
HXLINE( 274)							n = HX_("B",42,00,00,00);
            						}
            						else {
HXLINE( 274)							n = ::Std_obj::string(o);
            						}
            					}
HXDLIN( 274)					s1 = (s1 + n);
HXDLIN( 274)					goto _hx_goto_72;
            				}
            			}
            			_hx_goto_72:;
            		}
HXDLIN( 274)		o = 0;
HXDLIN( 274)		{
HXLINE( 274)			int _g7 = 0;
HXDLIN( 274)			while((_g7 < 12)){
HXLINE( 274)				_g7 = (_g7 + 1);
HXDLIN( 274)				int i = (_g7 - 1);
HXDLIN( 274)				if (((targ - v3) >= 0)) {
HXLINE( 274)					targ = (targ - v3);
HXDLIN( 274)					o = (o + 1);
            				}
            				else {
HXLINE( 274)					if ((o == 10)) {
HXLINE( 274)						n = HX_("A",41,00,00,00);
            					}
            					else {
HXLINE( 274)						if ((o == 11)) {
HXLINE( 274)							n = HX_("B",42,00,00,00);
            						}
            						else {
HXLINE( 274)							n = ::Std_obj::string(o);
            						}
            					}
HXDLIN( 274)					s1 = (s1 + n);
HXDLIN( 274)					goto _hx_goto_73;
            				}
            			}
            			_hx_goto_73:;
            		}
HXDLIN( 274)		o = 0;
HXDLIN( 274)		{
HXLINE( 274)			int _g8 = 0;
HXDLIN( 274)			while((_g8 < 12)){
HXLINE( 274)				_g8 = (_g8 + 1);
HXDLIN( 274)				int i = (_g8 - 1);
HXDLIN( 274)				if (((targ - v2) >= 0)) {
HXLINE( 274)					targ = (targ - v2);
HXDLIN( 274)					o = (o + 1);
            				}
            				else {
HXLINE( 274)					if ((o == 10)) {
HXLINE( 274)						n = HX_("A",41,00,00,00);
            					}
            					else {
HXLINE( 274)						if ((o == 11)) {
HXLINE( 274)							n = HX_("B",42,00,00,00);
            						}
            						else {
HXLINE( 274)							n = ::Std_obj::string(o);
            						}
            					}
HXDLIN( 274)					s1 = (s1 + n);
HXDLIN( 274)					goto _hx_goto_74;
            				}
            			}
            			_hx_goto_74:;
            		}
HXDLIN( 274)		o = 0;
HXDLIN( 274)		{
HXLINE( 274)			int _g9 = 0;
HXDLIN( 274)			while((_g9 < 12)){
HXLINE( 274)				_g9 = (_g9 + 1);
HXDLIN( 274)				int i = (_g9 - 1);
HXDLIN( 274)				if (((targ - v1) >= 0)) {
HXLINE( 274)					targ = (targ - v1);
HXDLIN( 274)					o = (o + 1);
            				}
            				else {
HXLINE( 274)					if ((o == 10)) {
HXLINE( 274)						n = HX_("A",41,00,00,00);
            					}
            					else {
HXLINE( 274)						if ((o == 11)) {
HXLINE( 274)							n = HX_("B",42,00,00,00);
            						}
            						else {
HXLINE( 274)							n = ::Std_obj::string(o);
            						}
            					}
HXDLIN( 274)					s1 = (s1 + n);
HXDLIN( 274)					goto _hx_goto_75;
            				}
            			}
            			_hx_goto_75:;
            		}
HXDLIN( 274)		o = 0;
HXDLIN( 274)		{
HXLINE( 274)			int _g10 = 0;
HXDLIN( 274)			while((_g10 < 12)){
HXLINE( 274)				_g10 = (_g10 + 1);
HXDLIN( 274)				int i = (_g10 - 1);
HXDLIN( 274)				if (((targ - 1) >= 0)) {
HXLINE( 274)					targ = (targ - 1);
HXDLIN( 274)					o = (o + 1);
            				}
            				else {
HXLINE( 274)					if ((o == 10)) {
HXLINE( 274)						n = HX_("A",41,00,00,00);
            					}
            					else {
HXLINE( 274)						if ((o == 11)) {
HXLINE( 274)							n = HX_("B",42,00,00,00);
            						}
            						else {
HXLINE( 274)							n = ::Std_obj::string(o);
            						}
            					}
HXDLIN( 274)					s1 = (s1 + n);
HXDLIN( 274)					goto _hx_goto_76;
            				}
            			}
            			_hx_goto_76:;
            		}
HXDLIN( 274)		::String so = HX_("",00,00,00,00);
HXDLIN( 274)		int j = 0;
HXDLIN( 274)		{
HXLINE( 274)			int _g11 = 0;
HXDLIN( 274)			int _g12 = s1.length;
HXDLIN( 274)			while((_g11 < _g12)){
HXLINE( 274)				_g11 = (_g11 + 1);
HXDLIN( 274)				int i = (_g11 - 1);
HXDLIN( 274)				if ((s1.charAt(i) != HX_("0",30,00,00,00))) {
HXLINE( 274)					j = i;
HXDLIN( 274)					goto _hx_goto_77;
            				}
            			}
            			_hx_goto_77:;
            		}
HXDLIN( 274)		so = s1.substr(j,null());
HXDLIN( 274)		b = so;
HXLINE( 275)		::doudecimal::Doudecimal_ out = ( (::doudecimal::Doudecimal_)(::Type_obj::createEmptyInstance(::hx::ClassOf< ::doudecimal::Doudecimal_ >())) );
HXLINE( 276)		if (negative) {
HXLINE( 277)			out->doudecimal = (HX_("-",2d,00,00,00) + b);
            		}
            		else {
HXLINE( 279)			out->doudecimal = b;
            		}
HXLINE( 281)		out->_hx_int = decimal;
HXLINE( 282)		return out;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Doudecimal__obj,fromInt,return )

::String Doudecimal__obj::convert(int targ){
            	HX_STACKFRAME(&_hx_pos_8e21bcc1365be68a_287_convert)
HXLINE( 288)		int v10 = ::Std_obj::_hx_int(::Math_obj::pow(( (Float)(12) ),( (Float)(10) )));
HXLINE( 289)		::haxe::Log_obj::trace(v10,::hx::SourceInfo(HX_("../src/doudecimal/Doudecimal.hx",e9,e7,c0,c6),289,HX_("doudecimal.Doudecimal_",71,f7,01,1c),HX_("convert",f3,fd,c9,1a)));
HXLINE( 290)		int v9 = ::Std_obj::_hx_int(::Math_obj::pow(( (Float)(12) ),( (Float)(9) )));
HXLINE( 291)		::haxe::Log_obj::trace(v9,::hx::SourceInfo(HX_("../src/doudecimal/Doudecimal.hx",e9,e7,c0,c6),291,HX_("doudecimal.Doudecimal_",71,f7,01,1c),HX_("convert",f3,fd,c9,1a)));
HXLINE( 292)		int v8 = ::Std_obj::_hx_int(::Math_obj::pow(( (Float)(12) ),( (Float)(8) )));
HXLINE( 293)		::haxe::Log_obj::trace(v8,::hx::SourceInfo(HX_("../src/doudecimal/Doudecimal.hx",e9,e7,c0,c6),293,HX_("doudecimal.Doudecimal_",71,f7,01,1c),HX_("convert",f3,fd,c9,1a)));
HXLINE( 294)		int v7 = ::Std_obj::_hx_int(::Math_obj::pow(( (Float)(12) ),( (Float)(7) )));
HXLINE( 295)		::haxe::Log_obj::trace(v7,::hx::SourceInfo(HX_("../src/doudecimal/Doudecimal.hx",e9,e7,c0,c6),295,HX_("doudecimal.Doudecimal_",71,f7,01,1c),HX_("convert",f3,fd,c9,1a)));
HXLINE( 296)		int v6 = ::Std_obj::_hx_int(::Math_obj::pow(( (Float)(12) ),( (Float)(6) )));
HXLINE( 297)		::haxe::Log_obj::trace(v6,::hx::SourceInfo(HX_("../src/doudecimal/Doudecimal.hx",e9,e7,c0,c6),297,HX_("doudecimal.Doudecimal_",71,f7,01,1c),HX_("convert",f3,fd,c9,1a)));
HXLINE( 298)		int v5 = ::Std_obj::_hx_int(::Math_obj::pow(( (Float)(12) ),( (Float)(5) )));
HXLINE( 299)		::haxe::Log_obj::trace(v5,::hx::SourceInfo(HX_("../src/doudecimal/Doudecimal.hx",e9,e7,c0,c6),299,HX_("doudecimal.Doudecimal_",71,f7,01,1c),HX_("convert",f3,fd,c9,1a)));
HXLINE( 300)		int v4 = ::Std_obj::_hx_int(::Math_obj::pow(( (Float)(12) ),( (Float)(4) )));
HXLINE( 301)		::haxe::Log_obj::trace(v4,::hx::SourceInfo(HX_("../src/doudecimal/Doudecimal.hx",e9,e7,c0,c6),301,HX_("doudecimal.Doudecimal_",71,f7,01,1c),HX_("convert",f3,fd,c9,1a)));
HXLINE( 302)		int v3 = ::Std_obj::_hx_int(::Math_obj::pow(( (Float)(12) ),( (Float)(3) )));
HXLINE( 303)		::haxe::Log_obj::trace(v3,::hx::SourceInfo(HX_("../src/doudecimal/Doudecimal.hx",e9,e7,c0,c6),303,HX_("doudecimal.Doudecimal_",71,f7,01,1c),HX_("convert",f3,fd,c9,1a)));
HXLINE( 304)		int v2 = ::Std_obj::_hx_int(::Math_obj::pow(( (Float)(12) ),( (Float)(2) )));
HXLINE( 305)		::haxe::Log_obj::trace(v2,::hx::SourceInfo(HX_("../src/doudecimal/Doudecimal.hx",e9,e7,c0,c6),305,HX_("doudecimal.Doudecimal_",71,f7,01,1c),HX_("convert",f3,fd,c9,1a)));
HXLINE( 306)		int v1 = 12;
HXLINE( 307)		::haxe::Log_obj::trace(v1,::hx::SourceInfo(HX_("../src/doudecimal/Doudecimal.hx",e9,e7,c0,c6),307,HX_("doudecimal.Doudecimal_",71,f7,01,1c),HX_("convert",f3,fd,c9,1a)));
HXLINE( 308)		::String s = HX_("",00,00,00,00);
HXLINE( 309)		int o = 0;
HXLINE( 310)		::String n = HX_("",00,00,00,00);
HXLINE( 312)		o = 0;
HXLINE( 313)		{
HXLINE( 313)			int _g = 0;
HXDLIN( 313)			while((_g < 12)){
HXLINE( 313)				_g = (_g + 1);
HXDLIN( 313)				int i = (_g - 1);
HXLINE( 314)				if (((targ - v10) >= 0)) {
HXLINE( 315)					targ = (targ - v10);
HXLINE( 316)					o = (o + 1);
            				}
            				else {
HXLINE( 318)					if ((o == 10)) {
HXLINE( 318)						n = HX_("A",41,00,00,00);
            					}
            					else {
HXLINE( 318)						if ((o == 11)) {
HXLINE( 318)							n = HX_("B",42,00,00,00);
            						}
            						else {
HXLINE( 318)							n = ::Std_obj::string(o);
            						}
            					}
HXLINE( 319)					s = (s + n);
HXLINE( 320)					goto _hx_goto_79;
            				}
            			}
            			_hx_goto_79:;
            		}
HXLINE( 323)		o = 0;
HXLINE( 324)		{
HXLINE( 324)			int _g1 = 0;
HXDLIN( 324)			while((_g1 < 12)){
HXLINE( 324)				_g1 = (_g1 + 1);
HXDLIN( 324)				int i = (_g1 - 1);
HXLINE( 325)				if (((targ - v9) >= 0)) {
HXLINE( 326)					targ = (targ - v9);
HXLINE( 327)					o = (o + 1);
            				}
            				else {
HXLINE( 329)					if ((o == 10)) {
HXLINE( 329)						n = HX_("A",41,00,00,00);
            					}
            					else {
HXLINE( 329)						if ((o == 11)) {
HXLINE( 329)							n = HX_("B",42,00,00,00);
            						}
            						else {
HXLINE( 329)							n = ::Std_obj::string(o);
            						}
            					}
HXLINE( 330)					s = (s + n);
HXLINE( 331)					goto _hx_goto_80;
            				}
            			}
            			_hx_goto_80:;
            		}
HXLINE( 334)		o = 0;
HXLINE( 335)		{
HXLINE( 335)			int _g2 = 0;
HXDLIN( 335)			while((_g2 < 12)){
HXLINE( 335)				_g2 = (_g2 + 1);
HXDLIN( 335)				int i = (_g2 - 1);
HXLINE( 336)				if (((targ - v8) >= 0)) {
HXLINE( 337)					targ = (targ - v8);
HXLINE( 338)					o = (o + 1);
            				}
            				else {
HXLINE( 340)					if ((o == 10)) {
HXLINE( 340)						n = HX_("A",41,00,00,00);
            					}
            					else {
HXLINE( 340)						if ((o == 11)) {
HXLINE( 340)							n = HX_("B",42,00,00,00);
            						}
            						else {
HXLINE( 340)							n = ::Std_obj::string(o);
            						}
            					}
HXLINE( 341)					s = (s + n);
HXLINE( 342)					goto _hx_goto_81;
            				}
            			}
            			_hx_goto_81:;
            		}
HXLINE( 345)		o = 0;
HXLINE( 346)		{
HXLINE( 346)			int _g3 = 0;
HXDLIN( 346)			while((_g3 < 12)){
HXLINE( 346)				_g3 = (_g3 + 1);
HXDLIN( 346)				int i = (_g3 - 1);
HXLINE( 347)				if (((targ - v7) >= 0)) {
HXLINE( 348)					targ = (targ - v7);
HXLINE( 349)					o = (o + 1);
            				}
            				else {
HXLINE( 351)					if ((o == 10)) {
HXLINE( 351)						n = HX_("A",41,00,00,00);
            					}
            					else {
HXLINE( 351)						if ((o == 11)) {
HXLINE( 351)							n = HX_("B",42,00,00,00);
            						}
            						else {
HXLINE( 351)							n = ::Std_obj::string(o);
            						}
            					}
HXLINE( 352)					s = (s + n);
HXLINE( 353)					goto _hx_goto_82;
            				}
            			}
            			_hx_goto_82:;
            		}
HXLINE( 356)		o = 0;
HXLINE( 357)		{
HXLINE( 357)			int _g4 = 0;
HXDLIN( 357)			while((_g4 < 12)){
HXLINE( 357)				_g4 = (_g4 + 1);
HXDLIN( 357)				int i = (_g4 - 1);
HXLINE( 358)				if (((targ - v6) >= 0)) {
HXLINE( 359)					targ = (targ - v6);
HXLINE( 360)					o = (o + 1);
            				}
            				else {
HXLINE( 362)					if ((o == 10)) {
HXLINE( 362)						n = HX_("A",41,00,00,00);
            					}
            					else {
HXLINE( 362)						if ((o == 11)) {
HXLINE( 362)							n = HX_("B",42,00,00,00);
            						}
            						else {
HXLINE( 362)							n = ::Std_obj::string(o);
            						}
            					}
HXLINE( 363)					s = (s + n);
HXLINE( 364)					goto _hx_goto_83;
            				}
            			}
            			_hx_goto_83:;
            		}
HXLINE( 367)		o = 0;
HXLINE( 368)		{
HXLINE( 368)			int _g5 = 0;
HXDLIN( 368)			while((_g5 < 12)){
HXLINE( 368)				_g5 = (_g5 + 1);
HXDLIN( 368)				int i = (_g5 - 1);
HXLINE( 369)				if (((targ - v5) >= 0)) {
HXLINE( 370)					targ = (targ - v5);
HXLINE( 371)					o = (o + 1);
            				}
            				else {
HXLINE( 373)					if ((o == 10)) {
HXLINE( 373)						n = HX_("A",41,00,00,00);
            					}
            					else {
HXLINE( 373)						if ((o == 11)) {
HXLINE( 373)							n = HX_("B",42,00,00,00);
            						}
            						else {
HXLINE( 373)							n = ::Std_obj::string(o);
            						}
            					}
HXLINE( 374)					s = (s + n);
HXLINE( 375)					goto _hx_goto_84;
            				}
            			}
            			_hx_goto_84:;
            		}
HXLINE( 378)		o = 0;
HXLINE( 379)		{
HXLINE( 379)			int _g6 = 0;
HXDLIN( 379)			while((_g6 < 12)){
HXLINE( 379)				_g6 = (_g6 + 1);
HXDLIN( 379)				int i = (_g6 - 1);
HXLINE( 380)				if (((targ - v4) >= 0)) {
HXLINE( 381)					targ = (targ - v4);
HXLINE( 382)					o = (o + 1);
            				}
            				else {
HXLINE( 384)					if ((o == 10)) {
HXLINE( 384)						n = HX_("A",41,00,00,00);
            					}
            					else {
HXLINE( 384)						if ((o == 11)) {
HXLINE( 384)							n = HX_("B",42,00,00,00);
            						}
            						else {
HXLINE( 384)							n = ::Std_obj::string(o);
            						}
            					}
HXLINE( 385)					s = (s + n);
HXLINE( 386)					goto _hx_goto_85;
            				}
            			}
            			_hx_goto_85:;
            		}
HXLINE( 389)		o = 0;
HXLINE( 390)		{
HXLINE( 390)			int _g7 = 0;
HXDLIN( 390)			while((_g7 < 12)){
HXLINE( 390)				_g7 = (_g7 + 1);
HXDLIN( 390)				int i = (_g7 - 1);
HXLINE( 391)				if (((targ - v3) >= 0)) {
HXLINE( 392)					targ = (targ - v3);
HXLINE( 393)					o = (o + 1);
            				}
            				else {
HXLINE( 395)					if ((o == 10)) {
HXLINE( 395)						n = HX_("A",41,00,00,00);
            					}
            					else {
HXLINE( 395)						if ((o == 11)) {
HXLINE( 395)							n = HX_("B",42,00,00,00);
            						}
            						else {
HXLINE( 395)							n = ::Std_obj::string(o);
            						}
            					}
HXLINE( 396)					s = (s + n);
HXLINE( 397)					goto _hx_goto_86;
            				}
            			}
            			_hx_goto_86:;
            		}
HXLINE( 400)		o = 0;
HXLINE( 401)		{
HXLINE( 401)			int _g8 = 0;
HXDLIN( 401)			while((_g8 < 12)){
HXLINE( 401)				_g8 = (_g8 + 1);
HXDLIN( 401)				int i = (_g8 - 1);
HXLINE( 402)				if (((targ - v2) >= 0)) {
HXLINE( 403)					targ = (targ - v2);
HXLINE( 404)					o = (o + 1);
            				}
            				else {
HXLINE( 406)					if ((o == 10)) {
HXLINE( 406)						n = HX_("A",41,00,00,00);
            					}
            					else {
HXLINE( 406)						if ((o == 11)) {
HXLINE( 406)							n = HX_("B",42,00,00,00);
            						}
            						else {
HXLINE( 406)							n = ::Std_obj::string(o);
            						}
            					}
HXLINE( 407)					s = (s + n);
HXLINE( 408)					goto _hx_goto_87;
            				}
            			}
            			_hx_goto_87:;
            		}
HXLINE( 411)		o = 0;
HXLINE( 412)		{
HXLINE( 412)			int _g9 = 0;
HXDLIN( 412)			while((_g9 < 12)){
HXLINE( 412)				_g9 = (_g9 + 1);
HXDLIN( 412)				int i = (_g9 - 1);
HXLINE( 413)				if (((targ - v1) >= 0)) {
HXLINE( 414)					targ = (targ - v1);
HXLINE( 415)					o = (o + 1);
            				}
            				else {
HXLINE( 417)					if ((o == 10)) {
HXLINE( 417)						n = HX_("A",41,00,00,00);
            					}
            					else {
HXLINE( 417)						if ((o == 11)) {
HXLINE( 417)							n = HX_("B",42,00,00,00);
            						}
            						else {
HXLINE( 417)							n = ::Std_obj::string(o);
            						}
            					}
HXLINE( 418)					s = (s + n);
HXLINE( 419)					goto _hx_goto_88;
            				}
            			}
            			_hx_goto_88:;
            		}
HXLINE( 422)		o = 0;
HXLINE( 423)		{
HXLINE( 423)			int _g10 = 0;
HXDLIN( 423)			while((_g10 < 12)){
HXLINE( 423)				_g10 = (_g10 + 1);
HXDLIN( 423)				int i = (_g10 - 1);
HXLINE( 424)				if (((targ - 1) >= 0)) {
HXLINE( 425)					targ = (targ - 1);
HXLINE( 426)					o = (o + 1);
            				}
            				else {
HXLINE( 428)					if ((o == 10)) {
HXLINE( 428)						n = HX_("A",41,00,00,00);
            					}
            					else {
HXLINE( 428)						if ((o == 11)) {
HXLINE( 428)							n = HX_("B",42,00,00,00);
            						}
            						else {
HXLINE( 428)							n = ::Std_obj::string(o);
            						}
            					}
HXLINE( 429)					s = (s + n);
HXLINE( 430)					goto _hx_goto_89;
            				}
            			}
            			_hx_goto_89:;
            		}
HXLINE( 433)		::String so = HX_("",00,00,00,00);
HXLINE( 434)		int j = 0;
HXLINE( 435)		{
HXLINE( 435)			int _g11 = 0;
HXDLIN( 435)			int _g12 = s.length;
HXDLIN( 435)			while((_g11 < _g12)){
HXLINE( 435)				_g11 = (_g11 + 1);
HXDLIN( 435)				int i = (_g11 - 1);
HXLINE( 436)				if ((s.charAt(i) != HX_("0",30,00,00,00))) {
HXLINE( 437)					j = i;
HXLINE( 438)					goto _hx_goto_90;
            				}
            			}
            			_hx_goto_90:;
            		}
HXLINE( 441)		so = s.substr(j,null());
HXLINE( 442)		return so;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Doudecimal__obj,convert,return )


::hx::ObjectPtr< Doudecimal__obj > Doudecimal__obj::__new(::String doudecimal) {
	::hx::ObjectPtr< Doudecimal__obj > __this = new Doudecimal__obj();
	__this->__construct(doudecimal);
	return __this;
}

::hx::ObjectPtr< Doudecimal__obj > Doudecimal__obj::__alloc(::hx::Ctx *_hx_ctx,::String doudecimal) {
	Doudecimal__obj *__this = (Doudecimal__obj*)(::hx::Ctx::alloc(_hx_ctx, sizeof(Doudecimal__obj), true, "doudecimal.Doudecimal_"));
	*(void **)__this = Doudecimal__obj::_hx_vtable;
	__this->__construct(doudecimal);
	return __this;
}

Doudecimal__obj::Doudecimal__obj()
{
}

void Doudecimal__obj::__Mark(HX_MARK_PARAMS)
{
	HX_MARK_BEGIN_CLASS(Doudecimal_);
	HX_MARK_MEMBER_NAME(doudecimal,"doudecimal");
	HX_MARK_MEMBER_NAME(_hx_int,"int");
	HX_MARK_END_CLASS();
}

void Doudecimal__obj::__Visit(HX_VISIT_PARAMS)
{
	HX_VISIT_MEMBER_NAME(doudecimal,"doudecimal");
	HX_VISIT_MEMBER_NAME(_hx_int,"int");
}

::hx::Val Doudecimal__obj::__Field(const ::String &inName,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"int") ) { return ::hx::Val( _hx_int ); }
		break;
	case 5:
		if (HX_FIELD_EQ(inName,"toInt") ) { return ::hx::Val( toInt_dyn() ); }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { return ::hx::Val( toString_dyn() ); }
		if (HX_FIELD_EQ(inName,"checkStr") ) { return ::hx::Val( checkStr_dyn() ); }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"toDozenal") ) { return ::hx::Val( toDozenal_dyn() ); }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"doudecimal") ) { return ::hx::Val( doudecimal ); }
	}
	return super::__Field(inName,inCallProp);
}

bool Doudecimal__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 7:
		if (HX_FIELD_EQ(inName,"toDigit") ) { outValue = toDigit_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"fromInt") ) { outValue = fromInt_dyn(); return true; }
		if (HX_FIELD_EQ(inName,"convert") ) { outValue = convert_dyn(); return true; }
		break;
	case 9:
		if (HX_FIELD_EQ(inName,"fromDigit") ) { outValue = fromDigit_dyn(); return true; }
	}
	return false;
}

::hx::Val Doudecimal__obj::__SetField(const ::String &inName,const ::hx::Val &inValue,::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 3:
		if (HX_FIELD_EQ(inName,"int") ) { _hx_int=inValue.Cast< int >(); return inValue; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"doudecimal") ) { doudecimal=inValue.Cast< ::String >(); return inValue; }
	}
	return super::__SetField(inName,inValue,inCallProp);
}

void Doudecimal__obj::__GetFields(Array< ::String> &outFields)
{
	outFields->push(HX_("doudecimal",47,37,a5,9e));
	outFields->push(HX_("int",ef,0c,50,00));
	super::__GetFields(outFields);
};

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo Doudecimal__obj_sMemberStorageInfo[] = {
	{::hx::fsString,(int)offsetof(Doudecimal__obj,doudecimal),HX_("doudecimal",47,37,a5,9e)},
	{::hx::fsInt,(int)offsetof(Doudecimal__obj,_hx_int),HX_("int",ef,0c,50,00)},
	{ ::hx::fsUnknown, 0, null()}
};
static ::hx::StaticInfo *Doudecimal__obj_sStaticStorageInfo = 0;
#endif

static ::String Doudecimal__obj_sMemberFields[] = {
	HX_("doudecimal",47,37,a5,9e),
	HX_("int",ef,0c,50,00),
	HX_("toString",ac,d0,6e,38),
	HX_("checkStr",c9,74,ea,ac),
	HX_("toDozenal",68,c7,8c,51),
	HX_("toInt",34,be,11,14),
	::String(null()) };

::hx::Class Doudecimal__obj::__mClass;

static ::String Doudecimal__obj_sStaticFields[] = {
	HX_("fromDigit",e3,d7,50,8e),
	HX_("toDigit",32,3a,4c,a6),
	HX_("fromInt",a5,dd,fa,57),
	HX_("convert",f3,fd,c9,1a),
	::String(null())
};

void Doudecimal__obj::__register()
{
	Doudecimal__obj _hx_dummy;
	Doudecimal__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("doudecimal.Doudecimal_",71,f7,01,1c);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Doudecimal__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Doudecimal__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(Doudecimal__obj_sMemberFields);
	__mClass->mCanCast = ::hx::TCanCast< Doudecimal__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Doudecimal__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Doudecimal__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace doudecimal

// Generated by Haxe 4.3.0-rc.1+
#include <hxcpp.h>

#ifndef INCLUDED_95f339a1d026d52c
#define INCLUDED_95f339a1d026d52c
#include "hxMath.h"
#endif
#ifndef INCLUDED_Std
#include <Std.h>
#endif
#ifndef INCLUDED_StringBuf
#include <StringBuf.h>
#endif
#ifndef INCLUDED_Type
#include <Type.h>
#endif
#ifndef INCLUDED_doudecimal_Doudecimal_
#include <doudecimal/Doudecimal_.h>
#endif
#ifndef INCLUDED_doudecimal__Doudecimal_Doudecimal_Impl_
#include <doudecimal/_Doudecimal/Doudecimal_Impl_.h>
#endif
#ifndef INCLUDED_haxe_Log
#include <haxe/Log.h>
#endif

HX_LOCAL_STACK_FRAME(_hx_pos_9d4c525f53c407c0_5__new,"doudecimal._Doudecimal.Doudecimal_Impl_","_new",0x371a0119,"doudecimal._Doudecimal.Doudecimal_Impl_._new","doudecimal/Doudecimal.hx",5,0x5c8bf5af)
HX_LOCAL_STACK_FRAME(_hx_pos_9d4c525f53c407c0_9_toString,"doudecimal._Doudecimal.Doudecimal_Impl_","toString",0xd175f864,"doudecimal._Doudecimal.Doudecimal_Impl_.toString","doudecimal/Doudecimal.hx",9,0x5c8bf5af)
HX_LOCAL_STACK_FRAME(_hx_pos_9d4c525f53c407c0_15_fromString,"doudecimal._Doudecimal.Doudecimal_Impl_","fromString",0x9b5eb393,"doudecimal._Doudecimal.Doudecimal_Impl_.fromString","doudecimal/Doudecimal.hx",15,0x5c8bf5af)
namespace doudecimal{
namespace _Doudecimal{

void Doudecimal_Impl__obj::__construct() { }

Dynamic Doudecimal_Impl__obj::__CreateEmpty() { return new Doudecimal_Impl__obj; }

void *Doudecimal_Impl__obj::_hx_vtable = 0;

Dynamic Doudecimal_Impl__obj::__Create(::hx::DynamicArray inArgs)
{
	::hx::ObjectPtr< Doudecimal_Impl__obj > _hx_result = new Doudecimal_Impl__obj();
	_hx_result->__construct();
	return _hx_result;
}

bool Doudecimal_Impl__obj::_hx_isInstanceOf(int inClassId) {
	return inClassId==(int)0x00000001 || inClassId==(int)0x4db77126;
}

int Doudecimal_Impl__obj::_new(int v){
            	HX_STACKFRAME(&_hx_pos_9d4c525f53c407c0_5__new)
HXDLIN(   5)		int this1 = v;
HXDLIN(   5)		return this1;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Doudecimal_Impl__obj,_new,return )

::String Doudecimal_Impl__obj::toString(int this1){
            	HX_STACKFRAME(&_hx_pos_9d4c525f53c407c0_9_toString)
HXLINE(  10)		int v = this1;
HXLINE(  11)		int tens = v;
HXDLIN(  11)		::String s;
HXDLIN(  11)		bool negative = false;
HXDLIN(  11)		if ((v <= 0)) {
HXLINE(  11)			tens = -(v);
HXDLIN(  11)			negative = true;
            		}
HXDLIN(  11)		::String b = HX_("",00,00,00,00);
HXDLIN(  11)		int targ = tens;
HXDLIN(  11)		int v10 = ::Std_obj::_hx_int(::Math_obj::pow(( (Float)(12) ),( (Float)(10) )));
HXDLIN(  11)		::haxe::Log_obj::trace(v10,::hx::SourceInfo(HX_("../src/doudecimal/Doudecimal.hx",e9,e7,c0,c6),289,HX_("doudecimal.Doudecimal_",71,f7,01,1c),HX_("convert",f3,fd,c9,1a)));
HXDLIN(  11)		int v9 = ::Std_obj::_hx_int(::Math_obj::pow(( (Float)(12) ),( (Float)(9) )));
HXDLIN(  11)		::haxe::Log_obj::trace(v9,::hx::SourceInfo(HX_("../src/doudecimal/Doudecimal.hx",e9,e7,c0,c6),291,HX_("doudecimal.Doudecimal_",71,f7,01,1c),HX_("convert",f3,fd,c9,1a)));
HXDLIN(  11)		int v8 = ::Std_obj::_hx_int(::Math_obj::pow(( (Float)(12) ),( (Float)(8) )));
HXDLIN(  11)		::haxe::Log_obj::trace(v8,::hx::SourceInfo(HX_("../src/doudecimal/Doudecimal.hx",e9,e7,c0,c6),293,HX_("doudecimal.Doudecimal_",71,f7,01,1c),HX_("convert",f3,fd,c9,1a)));
HXDLIN(  11)		int v7 = ::Std_obj::_hx_int(::Math_obj::pow(( (Float)(12) ),( (Float)(7) )));
HXDLIN(  11)		::haxe::Log_obj::trace(v7,::hx::SourceInfo(HX_("../src/doudecimal/Doudecimal.hx",e9,e7,c0,c6),295,HX_("doudecimal.Doudecimal_",71,f7,01,1c),HX_("convert",f3,fd,c9,1a)));
HXDLIN(  11)		int v6 = ::Std_obj::_hx_int(::Math_obj::pow(( (Float)(12) ),( (Float)(6) )));
HXDLIN(  11)		::haxe::Log_obj::trace(v6,::hx::SourceInfo(HX_("../src/doudecimal/Doudecimal.hx",e9,e7,c0,c6),297,HX_("doudecimal.Doudecimal_",71,f7,01,1c),HX_("convert",f3,fd,c9,1a)));
HXDLIN(  11)		int v5 = ::Std_obj::_hx_int(::Math_obj::pow(( (Float)(12) ),( (Float)(5) )));
HXDLIN(  11)		::haxe::Log_obj::trace(v5,::hx::SourceInfo(HX_("../src/doudecimal/Doudecimal.hx",e9,e7,c0,c6),299,HX_("doudecimal.Doudecimal_",71,f7,01,1c),HX_("convert",f3,fd,c9,1a)));
HXDLIN(  11)		int v4 = ::Std_obj::_hx_int(::Math_obj::pow(( (Float)(12) ),( (Float)(4) )));
HXDLIN(  11)		::haxe::Log_obj::trace(v4,::hx::SourceInfo(HX_("../src/doudecimal/Doudecimal.hx",e9,e7,c0,c6),301,HX_("doudecimal.Doudecimal_",71,f7,01,1c),HX_("convert",f3,fd,c9,1a)));
HXDLIN(  11)		int v3 = ::Std_obj::_hx_int(::Math_obj::pow(( (Float)(12) ),( (Float)(3) )));
HXDLIN(  11)		::haxe::Log_obj::trace(v3,::hx::SourceInfo(HX_("../src/doudecimal/Doudecimal.hx",e9,e7,c0,c6),303,HX_("doudecimal.Doudecimal_",71,f7,01,1c),HX_("convert",f3,fd,c9,1a)));
HXDLIN(  11)		int v2 = ::Std_obj::_hx_int(::Math_obj::pow(( (Float)(12) ),( (Float)(2) )));
HXDLIN(  11)		::haxe::Log_obj::trace(v2,::hx::SourceInfo(HX_("../src/doudecimal/Doudecimal.hx",e9,e7,c0,c6),305,HX_("doudecimal.Doudecimal_",71,f7,01,1c),HX_("convert",f3,fd,c9,1a)));
HXDLIN(  11)		int v1 = 12;
HXDLIN(  11)		::haxe::Log_obj::trace(v1,::hx::SourceInfo(HX_("../src/doudecimal/Doudecimal.hx",e9,e7,c0,c6),307,HX_("doudecimal.Doudecimal_",71,f7,01,1c),HX_("convert",f3,fd,c9,1a)));
HXDLIN(  11)		::String s1 = HX_("",00,00,00,00);
HXDLIN(  11)		int o = 0;
HXDLIN(  11)		::String n = HX_("",00,00,00,00);
HXDLIN(  11)		o = 0;
HXDLIN(  11)		{
HXLINE(  11)			int _g = 0;
HXDLIN(  11)			while((_g < 12)){
HXLINE(  11)				_g = (_g + 1);
HXDLIN(  11)				int i = (_g - 1);
HXDLIN(  11)				if (((targ - v10) >= 0)) {
HXLINE(  11)					targ = (targ - v10);
HXDLIN(  11)					o = (o + 1);
            				}
            				else {
HXLINE(  11)					if ((o == 10)) {
HXLINE(  11)						n = HX_("A",41,00,00,00);
            					}
            					else {
HXLINE(  11)						if ((o == 11)) {
HXLINE(  11)							n = HX_("B",42,00,00,00);
            						}
            						else {
HXLINE(  11)							n = ::Std_obj::string(o);
            						}
            					}
HXDLIN(  11)					s1 = (s1 + n);
HXDLIN(  11)					goto _hx_goto_1;
            				}
            			}
            			_hx_goto_1:;
            		}
HXDLIN(  11)		o = 0;
HXDLIN(  11)		{
HXLINE(  11)			int _g1 = 0;
HXDLIN(  11)			while((_g1 < 12)){
HXLINE(  11)				_g1 = (_g1 + 1);
HXDLIN(  11)				int i = (_g1 - 1);
HXDLIN(  11)				if (((targ - v9) >= 0)) {
HXLINE(  11)					targ = (targ - v9);
HXDLIN(  11)					o = (o + 1);
            				}
            				else {
HXLINE(  11)					if ((o == 10)) {
HXLINE(  11)						n = HX_("A",41,00,00,00);
            					}
            					else {
HXLINE(  11)						if ((o == 11)) {
HXLINE(  11)							n = HX_("B",42,00,00,00);
            						}
            						else {
HXLINE(  11)							n = ::Std_obj::string(o);
            						}
            					}
HXDLIN(  11)					s1 = (s1 + n);
HXDLIN(  11)					goto _hx_goto_2;
            				}
            			}
            			_hx_goto_2:;
            		}
HXDLIN(  11)		o = 0;
HXDLIN(  11)		{
HXLINE(  11)			int _g2 = 0;
HXDLIN(  11)			while((_g2 < 12)){
HXLINE(  11)				_g2 = (_g2 + 1);
HXDLIN(  11)				int i = (_g2 - 1);
HXDLIN(  11)				if (((targ - v8) >= 0)) {
HXLINE(  11)					targ = (targ - v8);
HXDLIN(  11)					o = (o + 1);
            				}
            				else {
HXLINE(  11)					if ((o == 10)) {
HXLINE(  11)						n = HX_("A",41,00,00,00);
            					}
            					else {
HXLINE(  11)						if ((o == 11)) {
HXLINE(  11)							n = HX_("B",42,00,00,00);
            						}
            						else {
HXLINE(  11)							n = ::Std_obj::string(o);
            						}
            					}
HXDLIN(  11)					s1 = (s1 + n);
HXDLIN(  11)					goto _hx_goto_3;
            				}
            			}
            			_hx_goto_3:;
            		}
HXDLIN(  11)		o = 0;
HXDLIN(  11)		{
HXLINE(  11)			int _g3 = 0;
HXDLIN(  11)			while((_g3 < 12)){
HXLINE(  11)				_g3 = (_g3 + 1);
HXDLIN(  11)				int i = (_g3 - 1);
HXDLIN(  11)				if (((targ - v7) >= 0)) {
HXLINE(  11)					targ = (targ - v7);
HXDLIN(  11)					o = (o + 1);
            				}
            				else {
HXLINE(  11)					if ((o == 10)) {
HXLINE(  11)						n = HX_("A",41,00,00,00);
            					}
            					else {
HXLINE(  11)						if ((o == 11)) {
HXLINE(  11)							n = HX_("B",42,00,00,00);
            						}
            						else {
HXLINE(  11)							n = ::Std_obj::string(o);
            						}
            					}
HXDLIN(  11)					s1 = (s1 + n);
HXDLIN(  11)					goto _hx_goto_4;
            				}
            			}
            			_hx_goto_4:;
            		}
HXDLIN(  11)		o = 0;
HXDLIN(  11)		{
HXLINE(  11)			int _g4 = 0;
HXDLIN(  11)			while((_g4 < 12)){
HXLINE(  11)				_g4 = (_g4 + 1);
HXDLIN(  11)				int i = (_g4 - 1);
HXDLIN(  11)				if (((targ - v6) >= 0)) {
HXLINE(  11)					targ = (targ - v6);
HXDLIN(  11)					o = (o + 1);
            				}
            				else {
HXLINE(  11)					if ((o == 10)) {
HXLINE(  11)						n = HX_("A",41,00,00,00);
            					}
            					else {
HXLINE(  11)						if ((o == 11)) {
HXLINE(  11)							n = HX_("B",42,00,00,00);
            						}
            						else {
HXLINE(  11)							n = ::Std_obj::string(o);
            						}
            					}
HXDLIN(  11)					s1 = (s1 + n);
HXDLIN(  11)					goto _hx_goto_5;
            				}
            			}
            			_hx_goto_5:;
            		}
HXDLIN(  11)		o = 0;
HXDLIN(  11)		{
HXLINE(  11)			int _g5 = 0;
HXDLIN(  11)			while((_g5 < 12)){
HXLINE(  11)				_g5 = (_g5 + 1);
HXDLIN(  11)				int i = (_g5 - 1);
HXDLIN(  11)				if (((targ - v5) >= 0)) {
HXLINE(  11)					targ = (targ - v5);
HXDLIN(  11)					o = (o + 1);
            				}
            				else {
HXLINE(  11)					if ((o == 10)) {
HXLINE(  11)						n = HX_("A",41,00,00,00);
            					}
            					else {
HXLINE(  11)						if ((o == 11)) {
HXLINE(  11)							n = HX_("B",42,00,00,00);
            						}
            						else {
HXLINE(  11)							n = ::Std_obj::string(o);
            						}
            					}
HXDLIN(  11)					s1 = (s1 + n);
HXDLIN(  11)					goto _hx_goto_6;
            				}
            			}
            			_hx_goto_6:;
            		}
HXDLIN(  11)		o = 0;
HXDLIN(  11)		{
HXLINE(  11)			int _g6 = 0;
HXDLIN(  11)			while((_g6 < 12)){
HXLINE(  11)				_g6 = (_g6 + 1);
HXDLIN(  11)				int i = (_g6 - 1);
HXDLIN(  11)				if (((targ - v4) >= 0)) {
HXLINE(  11)					targ = (targ - v4);
HXDLIN(  11)					o = (o + 1);
            				}
            				else {
HXLINE(  11)					if ((o == 10)) {
HXLINE(  11)						n = HX_("A",41,00,00,00);
            					}
            					else {
HXLINE(  11)						if ((o == 11)) {
HXLINE(  11)							n = HX_("B",42,00,00,00);
            						}
            						else {
HXLINE(  11)							n = ::Std_obj::string(o);
            						}
            					}
HXDLIN(  11)					s1 = (s1 + n);
HXDLIN(  11)					goto _hx_goto_7;
            				}
            			}
            			_hx_goto_7:;
            		}
HXDLIN(  11)		o = 0;
HXDLIN(  11)		{
HXLINE(  11)			int _g7 = 0;
HXDLIN(  11)			while((_g7 < 12)){
HXLINE(  11)				_g7 = (_g7 + 1);
HXDLIN(  11)				int i = (_g7 - 1);
HXDLIN(  11)				if (((targ - v3) >= 0)) {
HXLINE(  11)					targ = (targ - v3);
HXDLIN(  11)					o = (o + 1);
            				}
            				else {
HXLINE(  11)					if ((o == 10)) {
HXLINE(  11)						n = HX_("A",41,00,00,00);
            					}
            					else {
HXLINE(  11)						if ((o == 11)) {
HXLINE(  11)							n = HX_("B",42,00,00,00);
            						}
            						else {
HXLINE(  11)							n = ::Std_obj::string(o);
            						}
            					}
HXDLIN(  11)					s1 = (s1 + n);
HXDLIN(  11)					goto _hx_goto_8;
            				}
            			}
            			_hx_goto_8:;
            		}
HXDLIN(  11)		o = 0;
HXDLIN(  11)		{
HXLINE(  11)			int _g8 = 0;
HXDLIN(  11)			while((_g8 < 12)){
HXLINE(  11)				_g8 = (_g8 + 1);
HXDLIN(  11)				int i = (_g8 - 1);
HXDLIN(  11)				if (((targ - v2) >= 0)) {
HXLINE(  11)					targ = (targ - v2);
HXDLIN(  11)					o = (o + 1);
            				}
            				else {
HXLINE(  11)					if ((o == 10)) {
HXLINE(  11)						n = HX_("A",41,00,00,00);
            					}
            					else {
HXLINE(  11)						if ((o == 11)) {
HXLINE(  11)							n = HX_("B",42,00,00,00);
            						}
            						else {
HXLINE(  11)							n = ::Std_obj::string(o);
            						}
            					}
HXDLIN(  11)					s1 = (s1 + n);
HXDLIN(  11)					goto _hx_goto_9;
            				}
            			}
            			_hx_goto_9:;
            		}
HXDLIN(  11)		o = 0;
HXDLIN(  11)		{
HXLINE(  11)			int _g9 = 0;
HXDLIN(  11)			while((_g9 < 12)){
HXLINE(  11)				_g9 = (_g9 + 1);
HXDLIN(  11)				int i = (_g9 - 1);
HXDLIN(  11)				if (((targ - v1) >= 0)) {
HXLINE(  11)					targ = (targ - v1);
HXDLIN(  11)					o = (o + 1);
            				}
            				else {
HXLINE(  11)					if ((o == 10)) {
HXLINE(  11)						n = HX_("A",41,00,00,00);
            					}
            					else {
HXLINE(  11)						if ((o == 11)) {
HXLINE(  11)							n = HX_("B",42,00,00,00);
            						}
            						else {
HXLINE(  11)							n = ::Std_obj::string(o);
            						}
            					}
HXDLIN(  11)					s1 = (s1 + n);
HXDLIN(  11)					goto _hx_goto_10;
            				}
            			}
            			_hx_goto_10:;
            		}
HXDLIN(  11)		o = 0;
HXDLIN(  11)		{
HXLINE(  11)			int _g10 = 0;
HXDLIN(  11)			while((_g10 < 12)){
HXLINE(  11)				_g10 = (_g10 + 1);
HXDLIN(  11)				int i = (_g10 - 1);
HXDLIN(  11)				if (((targ - 1) >= 0)) {
HXLINE(  11)					targ = (targ - 1);
HXDLIN(  11)					o = (o + 1);
            				}
            				else {
HXLINE(  11)					if ((o == 10)) {
HXLINE(  11)						n = HX_("A",41,00,00,00);
            					}
            					else {
HXLINE(  11)						if ((o == 11)) {
HXLINE(  11)							n = HX_("B",42,00,00,00);
            						}
            						else {
HXLINE(  11)							n = ::Std_obj::string(o);
            						}
            					}
HXDLIN(  11)					s1 = (s1 + n);
HXDLIN(  11)					goto _hx_goto_11;
            				}
            			}
            			_hx_goto_11:;
            		}
HXDLIN(  11)		::String so = HX_("",00,00,00,00);
HXDLIN(  11)		int j = 0;
HXDLIN(  11)		{
HXLINE(  11)			int _g11 = 0;
HXDLIN(  11)			int _g12 = s1.length;
HXDLIN(  11)			while((_g11 < _g12)){
HXLINE(  11)				_g11 = (_g11 + 1);
HXDLIN(  11)				int i = (_g11 - 1);
HXDLIN(  11)				if ((s1.charAt(i) != HX_("0",30,00,00,00))) {
HXLINE(  11)					j = i;
HXDLIN(  11)					goto _hx_goto_12;
            				}
            			}
            			_hx_goto_12:;
            		}
HXDLIN(  11)		so = s1.substr(j,null());
HXDLIN(  11)		b = so;
HXDLIN(  11)		::doudecimal::Doudecimal_ out = ( (::doudecimal::Doudecimal_)(::Type_obj::createEmptyInstance(::hx::ClassOf< ::doudecimal::Doudecimal_ >())) );
HXDLIN(  11)		if (negative) {
HXLINE(  11)			out->doudecimal = (HX_("-",2d,00,00,00) + b);
            		}
            		else {
HXLINE(  11)			out->doudecimal = b;
            		}
HXDLIN(  11)		out->_hx_int = v;
HXDLIN(  11)		::doudecimal::Doudecimal_ dd = out;
HXLINE(  12)		return dd->doudecimal;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Doudecimal_Impl__obj,toString,return )

int Doudecimal_Impl__obj::fromString(::String s){
            	HX_GC_STACKFRAME(&_hx_pos_9d4c525f53c407c0_15_fromString)
HXLINE(  16)		int dd_int;
HXDLIN(  16)		::String doudecimal = s;
HXDLIN(  16)		int len = doudecimal.length;
HXDLIN(  16)		::StringBuf b = ::StringBuf_obj::__alloc( HX_CTX );
HXDLIN(  16)		int no = 0;
HXDLIN(  16)		int _g = 0;
HXDLIN(  16)		int _g1 = len;
HXDLIN(  16)		while((_g < _g1)){
HXLINE(  16)			_g = (_g + 1);
HXDLIN(  16)			int i = (_g - 1);
HXLINE( 119)			no = doudecimal.cca(i);
HXLINE(  16)			switch((int)(no)){
            				case (int)35: {
HXLINE(  16)					if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  16)						b->flush();
            					}
HXDLIN(  16)					if (::hx::IsNull( b->b )) {
HXLINE(  16)						b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(HX_("A",41,00,00,00)));
            					}
            					else {
HXLINE(  16)						::Array< ::String > b1 = b->b;
HXDLIN(  16)						b1->push(::Std_obj::string(HX_("A",41,00,00,00)));
            					}
            				}
            				break;
            				case (int)42: {
HXLINE(  16)					if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  16)						b->flush();
            					}
HXDLIN(  16)					if (::hx::IsNull( b->b )) {
HXLINE(  16)						b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(HX_("B",42,00,00,00)));
            					}
            					else {
HXLINE(  16)						::Array< ::String > b1 = b->b;
HXDLIN(  16)						b1->push(::Std_obj::string(HX_("B",42,00,00,00)));
            					}
            				}
            				break;
            				case (int)45: {
HXLINE(  16)					if ((i == 0)) {
HXLINE(  16)						if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  16)							b->flush();
            						}
HXDLIN(  16)						if (::hx::IsNull( b->b )) {
HXLINE(  16)							b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(HX_("-",2d,00,00,00)));
            						}
            						else {
HXLINE(  16)							::Array< ::String > b1 = b->b;
HXDLIN(  16)							b1->push(::Std_obj::string(HX_("-",2d,00,00,00)));
            						}
            					}
            					else {
HXLINE(  16)						HX_STACK_DO_THROW(HX_("invalid Doudecimal",f0,cd,48,30));
            					}
            				}
            				break;
            				case (int)48: {
HXLINE(  16)					if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  16)						b->flush();
            					}
HXDLIN(  16)					if (::hx::IsNull( b->b )) {
HXLINE(  16)						b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(HX_("0",30,00,00,00)));
            					}
            					else {
HXLINE(  16)						::Array< ::String > b1 = b->b;
HXDLIN(  16)						b1->push(::Std_obj::string(HX_("0",30,00,00,00)));
            					}
            				}
            				break;
            				case (int)49: {
HXLINE(  16)					if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  16)						b->flush();
            					}
HXDLIN(  16)					if (::hx::IsNull( b->b )) {
HXLINE(  16)						b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(HX_("1",31,00,00,00)));
            					}
            					else {
HXLINE(  16)						::Array< ::String > b1 = b->b;
HXDLIN(  16)						b1->push(::Std_obj::string(HX_("1",31,00,00,00)));
            					}
            				}
            				break;
            				case (int)50: {
HXLINE(  16)					if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  16)						b->flush();
            					}
HXDLIN(  16)					if (::hx::IsNull( b->b )) {
HXLINE(  16)						b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(HX_("2",32,00,00,00)));
            					}
            					else {
HXLINE(  16)						::Array< ::String > b1 = b->b;
HXDLIN(  16)						b1->push(::Std_obj::string(HX_("2",32,00,00,00)));
            					}
            				}
            				break;
            				case (int)51: {
HXLINE(  16)					if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  16)						b->flush();
            					}
HXDLIN(  16)					if (::hx::IsNull( b->b )) {
HXLINE(  16)						b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(HX_("3",33,00,00,00)));
            					}
            					else {
HXLINE(  16)						::Array< ::String > b1 = b->b;
HXDLIN(  16)						b1->push(::Std_obj::string(HX_("3",33,00,00,00)));
            					}
            				}
            				break;
            				case (int)52: {
HXLINE(  16)					if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  16)						b->flush();
            					}
HXDLIN(  16)					if (::hx::IsNull( b->b )) {
HXLINE(  16)						b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(HX_("4",34,00,00,00)));
            					}
            					else {
HXLINE(  16)						::Array< ::String > b1 = b->b;
HXDLIN(  16)						b1->push(::Std_obj::string(HX_("4",34,00,00,00)));
            					}
            				}
            				break;
            				case (int)53: {
HXLINE(  16)					if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  16)						b->flush();
            					}
HXDLIN(  16)					if (::hx::IsNull( b->b )) {
HXLINE(  16)						b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(HX_("5",35,00,00,00)));
            					}
            					else {
HXLINE(  16)						::Array< ::String > b1 = b->b;
HXDLIN(  16)						b1->push(::Std_obj::string(HX_("5",35,00,00,00)));
            					}
            				}
            				break;
            				case (int)54: {
HXLINE(  16)					if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  16)						b->flush();
            					}
HXDLIN(  16)					if (::hx::IsNull( b->b )) {
HXLINE(  16)						b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(HX_("6",36,00,00,00)));
            					}
            					else {
HXLINE(  16)						::Array< ::String > b1 = b->b;
HXDLIN(  16)						b1->push(::Std_obj::string(HX_("6",36,00,00,00)));
            					}
            				}
            				break;
            				case (int)55: {
HXLINE(  16)					if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  16)						b->flush();
            					}
HXDLIN(  16)					if (::hx::IsNull( b->b )) {
HXLINE(  16)						b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(HX_("7",37,00,00,00)));
            					}
            					else {
HXLINE(  16)						::Array< ::String > b1 = b->b;
HXDLIN(  16)						b1->push(::Std_obj::string(HX_("7",37,00,00,00)));
            					}
            				}
            				break;
            				case (int)56: {
HXLINE(  16)					if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  16)						b->flush();
            					}
HXDLIN(  16)					if (::hx::IsNull( b->b )) {
HXLINE(  16)						b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(HX_("8",38,00,00,00)));
            					}
            					else {
HXLINE(  16)						::Array< ::String > b1 = b->b;
HXDLIN(  16)						b1->push(::Std_obj::string(HX_("8",38,00,00,00)));
            					}
            				}
            				break;
            				case (int)57: {
HXLINE(  16)					if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  16)						b->flush();
            					}
HXDLIN(  16)					if (::hx::IsNull( b->b )) {
HXLINE(  16)						b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(HX_("9",39,00,00,00)));
            					}
            					else {
HXLINE(  16)						::Array< ::String > b1 = b->b;
HXDLIN(  16)						b1->push(::Std_obj::string(HX_("9",39,00,00,00)));
            					}
            				}
            				break;
            				case (int)59: {
HXLINE(  16)					if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  16)						b->flush();
            					}
HXDLIN(  16)					if (::hx::IsNull( b->b )) {
HXLINE(  16)						b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(HX_(";",3b,00,00,00)));
            					}
            					else {
HXLINE(  16)						::Array< ::String > b1 = b->b;
HXDLIN(  16)						b1->push(::Std_obj::string(HX_(";",3b,00,00,00)));
            					}
            				}
            				break;
            				case (int)65: {
HXLINE(  16)					if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  16)						b->flush();
            					}
HXDLIN(  16)					if (::hx::IsNull( b->b )) {
HXLINE(  16)						b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(HX_("A",41,00,00,00)));
            					}
            					else {
HXLINE(  16)						::Array< ::String > b1 = b->b;
HXDLIN(  16)						b1->push(::Std_obj::string(HX_("A",41,00,00,00)));
            					}
            				}
            				break;
            				case (int)66: {
HXLINE(  16)					if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  16)						b->flush();
            					}
HXDLIN(  16)					if (::hx::IsNull( b->b )) {
HXLINE(  16)						b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(HX_("B",42,00,00,00)));
            					}
            					else {
HXLINE(  16)						::Array< ::String > b1 = b->b;
HXDLIN(  16)						b1->push(::Std_obj::string(HX_("B",42,00,00,00)));
            					}
            				}
            				break;
            				case (int)69: {
HXLINE(  16)					if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  16)						b->flush();
            					}
HXDLIN(  16)					if (::hx::IsNull( b->b )) {
HXLINE(  16)						b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(HX_("B",42,00,00,00)));
            					}
            					else {
HXLINE(  16)						::Array< ::String > b1 = b->b;
HXDLIN(  16)						b1->push(::Std_obj::string(HX_("B",42,00,00,00)));
            					}
            				}
            				break;
            				case (int)84: {
HXLINE(  16)					if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  16)						b->flush();
            					}
HXDLIN(  16)					if (::hx::IsNull( b->b )) {
HXLINE(  16)						b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(HX_("A",41,00,00,00)));
            					}
            					else {
HXLINE(  16)						::Array< ::String > b1 = b->b;
HXDLIN(  16)						b1->push(::Std_obj::string(HX_("A",41,00,00,00)));
            					}
            				}
            				break;
            				case (int)88: {
HXLINE(  16)					if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  16)						b->flush();
            					}
HXDLIN(  16)					if (::hx::IsNull( b->b )) {
HXLINE(  16)						b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(HX_("A",41,00,00,00)));
            					}
            					else {
HXLINE(  16)						::Array< ::String > b1 = b->b;
HXDLIN(  16)						b1->push(::Std_obj::string(HX_("A",41,00,00,00)));
            					}
            				}
            				break;
            				case (int)90: {
HXLINE(  16)					if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  16)						b->flush();
            					}
HXDLIN(  16)					if (::hx::IsNull( b->b )) {
HXLINE(  16)						b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(HX_("B",42,00,00,00)));
            					}
            					else {
HXLINE(  16)						::Array< ::String > b1 = b->b;
HXDLIN(  16)						b1->push(::Std_obj::string(HX_("B",42,00,00,00)));
            					}
            				}
            				break;
            				case (int)97: {
HXLINE(  16)					if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  16)						b->flush();
            					}
HXDLIN(  16)					if (::hx::IsNull( b->b )) {
HXLINE(  16)						b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(HX_("A",41,00,00,00)));
            					}
            					else {
HXLINE(  16)						::Array< ::String > b1 = b->b;
HXDLIN(  16)						b1->push(::Std_obj::string(HX_("A",41,00,00,00)));
            					}
            				}
            				break;
            				case (int)98: {
HXLINE(  16)					if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  16)						b->flush();
            					}
HXDLIN(  16)					if (::hx::IsNull( b->b )) {
HXLINE(  16)						b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(HX_("B",42,00,00,00)));
            					}
            					else {
HXLINE(  16)						::Array< ::String > b1 = b->b;
HXDLIN(  16)						b1->push(::Std_obj::string(HX_("B",42,00,00,00)));
            					}
            				}
            				break;
            				case (int)102: {
HXLINE(  16)					if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  16)						b->flush();
            					}
HXDLIN(  16)					if (::hx::IsNull( b->b )) {
HXLINE(  16)						b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(HX_("A",41,00,00,00)));
            					}
            					else {
HXLINE(  16)						::Array< ::String > b1 = b->b;
HXDLIN(  16)						b1->push(::Std_obj::string(HX_("A",41,00,00,00)));
            					}
            				}
            				break;
            				case (int)116: {
HXLINE(  16)					if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  16)						b->flush();
            					}
HXDLIN(  16)					if (::hx::IsNull( b->b )) {
HXLINE(  16)						b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(HX_("A",41,00,00,00)));
            					}
            					else {
HXLINE(  16)						::Array< ::String > b1 = b->b;
HXDLIN(  16)						b1->push(::Std_obj::string(HX_("A",41,00,00,00)));
            					}
            				}
            				break;
            				case (int)122: {
HXLINE(  16)					if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  16)						b->flush();
            					}
HXDLIN(  16)					if (::hx::IsNull( b->b )) {
HXLINE(  16)						b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(HX_("B",42,00,00,00)));
            					}
            					else {
HXLINE(  16)						::Array< ::String > b1 = b->b;
HXDLIN(  16)						b1->push(::Std_obj::string(HX_("B",42,00,00,00)));
            					}
            				}
            				break;
            				case (int)8586: {
HXLINE(  16)					if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  16)						b->flush();
            					}
HXDLIN(  16)					if (::hx::IsNull( b->b )) {
HXLINE(  16)						b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(HX_("A",41,00,00,00)));
            					}
            					else {
HXLINE(  16)						::Array< ::String > b1 = b->b;
HXDLIN(  16)						b1->push(::Std_obj::string(HX_("A",41,00,00,00)));
            					}
            				}
            				break;
            				case (int)8587: {
HXLINE(  16)					if (::hx::IsNotNull( b->charBuf )) {
HXLINE(  16)						b->flush();
            					}
HXDLIN(  16)					if (::hx::IsNull( b->b )) {
HXLINE(  16)						b->b = ::Array_obj< ::String >::__new(1)->init(0,::Std_obj::string(HX_("B",42,00,00,00)));
            					}
            					else {
HXLINE(  16)						::Array< ::String > b1 = b->b;
HXDLIN(  16)						b1->push(::Std_obj::string(HX_("B",42,00,00,00)));
            					}
            				}
            				break;
            				default:{
HXLINE(  16)					HX_STACK_DO_THROW(HX_("invalid Doudecimal",f0,cd,48,30));
            				}
            			}
            		}
HXDLIN(  16)		::String dd_doudecimal = b->toString();
HXDLIN(  16)		int len1 = dd_doudecimal.length;
HXDLIN(  16)		int n = (len1 - 1);
HXDLIN(  16)		Float multi;
HXDLIN(  16)		Float out = ((Float)0.);
HXDLIN(  16)		::String dozit = HX_("",00,00,00,00);
HXDLIN(  16)		bool negative = false;
HXDLIN(  16)		if ((dd_doudecimal.charAt(0) == HX_("-",2d,00,00,00))) {
HXLINE(  16)			dd_doudecimal = dd_doudecimal.substr(1,null());
HXLINE( 454)			len1 = dd_doudecimal.length;
HXLINE( 455)			negative = true;
            		}
HXLINE(  16)		int _g2 = 0;
HXDLIN(  16)		int _g3 = len1;
HXDLIN(  16)		while((_g2 < _g3)){
HXLINE(  16)			_g2 = (_g2 + 1);
HXDLIN(  16)			int i = (_g2 - 1);
HXLINE( 458)			multi = ::Math_obj::pow(( (Float)(12) ),( (Float)(n) ));
HXLINE( 459)			dozit = dd_doudecimal.charAt(i);
HXLINE(  16)			 ::Dynamic no;
HXDLIN(  16)			if ((dozit == HX_("A",41,00,00,00))) {
HXLINE(  16)				no = 10;
            			}
            			else {
HXLINE(  16)				if ((dozit == HX_("B",42,00,00,00))) {
HXLINE(  16)					no = 11;
            				}
            				else {
HXLINE(  16)					no = ::Std_obj::parseInt(dozit);
            				}
            			}
HXLINE( 467)			out = (out + (multi * ( (Float)(no) )));
HXLINE(  16)			n = (n - 1);
            		}
HXDLIN(  16)		if (negative) {
HXLINE(  16)			dd_int = -(::Std_obj::_hx_int(out));
            		}
            		else {
HXLINE(  16)			dd_int = ::Std_obj::_hx_int(out);
            		}
HXLINE(  17)		return dd_int;
            	}


STATIC_HX_DEFINE_DYNAMIC_FUNC1(Doudecimal_Impl__obj,fromString,return )


Doudecimal_Impl__obj::Doudecimal_Impl__obj()
{
}

bool Doudecimal_Impl__obj::__GetStatic(const ::String &inName, Dynamic &outValue, ::hx::PropertyAccess inCallProp)
{
	switch(inName.length) {
	case 4:
		if (HX_FIELD_EQ(inName,"_new") ) { outValue = _new_dyn(); return true; }
		break;
	case 8:
		if (HX_FIELD_EQ(inName,"toString") ) { outValue = toString_dyn(); return true; }
		break;
	case 10:
		if (HX_FIELD_EQ(inName,"fromString") ) { outValue = fromString_dyn(); return true; }
	}
	return false;
}

#ifdef HXCPP_SCRIPTABLE
static ::hx::StorageInfo *Doudecimal_Impl__obj_sMemberStorageInfo = 0;
static ::hx::StaticInfo *Doudecimal_Impl__obj_sStaticStorageInfo = 0;
#endif

::hx::Class Doudecimal_Impl__obj::__mClass;

static ::String Doudecimal_Impl__obj_sStaticFields[] = {
	HX_("_new",61,15,1f,3f),
	HX_("toString",ac,d0,6e,38),
	HX_("fromString",db,2d,74,54),
	::String(null())
};

void Doudecimal_Impl__obj::__register()
{
	Doudecimal_Impl__obj _hx_dummy;
	Doudecimal_Impl__obj::_hx_vtable = *(void **)&_hx_dummy;
	::hx::Static(__mClass) = new ::hx::Class_obj();
	__mClass->mName = HX_("doudecimal._Doudecimal.Doudecimal_Impl_",b6,0f,31,12);
	__mClass->mSuper = &super::__SGetClass();
	__mClass->mConstructEmpty = &__CreateEmpty;
	__mClass->mConstructArgs = &__Create;
	__mClass->mGetStaticField = &Doudecimal_Impl__obj::__GetStatic;
	__mClass->mSetStaticField = &::hx::Class_obj::SetNoStaticField;
	__mClass->mStatics = ::hx::Class_obj::dupFunctions(Doudecimal_Impl__obj_sStaticFields);
	__mClass->mMembers = ::hx::Class_obj::dupFunctions(0 /* sMemberFields */);
	__mClass->mCanCast = ::hx::TCanCast< Doudecimal_Impl__obj >;
#ifdef HXCPP_SCRIPTABLE
	__mClass->mMemberStorageInfo = Doudecimal_Impl__obj_sMemberStorageInfo;
#endif
#ifdef HXCPP_SCRIPTABLE
	__mClass->mStaticStorageInfo = Doudecimal_Impl__obj_sStaticStorageInfo;
#endif
	::hx::_hx_RegisterClass(__mClass->mName, __mClass);
}

} // end namespace doudecimal
} // end namespace _Doudecimal
